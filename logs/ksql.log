[2019-08-12 13:58:55,879] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:58:55,900] INFO KsqlRestConfig values: 
	access.control.allow.headers = 
	access.control.allow.methods = 
	access.control.allow.origin = 
	authentication.method = NONE
	authentication.realm = 
	authentication.roles = [*]
	authentication.skip.paths = []
	compression.enable = true
	debug = false
	idle.timeout.ms = 30000
	ksql.server.command.response.timeout.ms = 5000
	ksql.server.install.dir = /Users/zlim/desktop/github/ksql
	ksql.server.preconditions = []
	ksql.server.websockets.num.threads = 5
	listeners = [http://0.0.0.0:8088]
	metric.reporters = []
	metrics.jmx.prefix = rest-utils
	metrics.num.samples = 2
	metrics.sample.window.ms = 30000
	metrics.tag.map = []
	port = 8080
	query.stream.disconnect.check = 1000
	request.logger.name = io.confluent.rest-utils.requests
	resource.extension.classes = []
	response.mediatype.default = application/json
	response.mediatype.preferred = [application/json]
	rest.servlet.initializor.classes = []
	shutdown.graceful.ms = 1000
	ssl.cipher.suites = []
	ssl.client.auth = false
	ssl.client.authentication = NONE
	ssl.enabled.protocols = []
	ssl.endpoint.identification.algorithm = null
	ssl.key.password = [hidden]
	ssl.keymanager.algorithm = 
	ssl.keystore.location = 
	ssl.keystore.password = [hidden]
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = 
	ssl.trustmanager.algorithm = 
	ssl.truststore.location = 
	ssl.truststore.password = [hidden]
	ssl.truststore.type = JKS
	websocket.path.prefix = /ws
	websocket.servlet.initializor.classes = []
 (io.confluent.ksql.rest.server.KsqlRestConfig:347)
[2019-08-12 13:58:55,952] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:58:55,961] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:58:55,963] INFO ProcessingLogConfig values: 
	ksql.logging.processing.rows.include = false
	ksql.logging.processing.stream.auto.create = true
	ksql.logging.processing.stream.name = KSQL_PROCESSING_LOG
	ksql.logging.processing.topic.auto.create = true
	ksql.logging.processing.topic.name = 
	ksql.logging.processing.topic.partitions = 1
	ksql.logging.processing.topic.replication.factor = 1
 (io.confluent.ksql.logging.processing.ProcessingLogConfig:347)
[2019-08-12 13:58:56,169] INFO Setting UDF blacklisted classes to:  (io.confluent.ksql.function.Blacklist:70)
[2019-08-12 13:58:56,463] INFO Adding UDF name='ComplexFunction' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:56,899] INFO Adding function ComplexFunction for method public java.lang.Object io.confluent.ksql.function.UdfLoaderTest$ComplexUdf.foo(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:57,265] INFO Adding UDF name='ConfigurableUdf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:57,322] INFO Adding function ConfigurableUdf for method public int io.confluent.ksql.function.UdfLoaderTest$ConfigurableUdf.foo(int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:57,322] INFO Adding UDF name='SomeFunction' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:57,349] INFO Adding function SomeFunction for method public int io.confluent.ksql.function.UdfLoaderTest$SomeFunctionUdf.foo(java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:57,357] WARN Ignoring method annotated with @Udf but missing @UdfDescription. method='something' from path=internal (io.confluent.ksql.function.UdfLoader:209)
[2019-08-12 13:58:57,358] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:57,400] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongString(long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:57,401] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:57,420] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongLongString(long,long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:57,421] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:57,481] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongVarargs(long[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:57,485] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:57,559] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffStruct(org.apache.kafka.connect.data.Struct) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:57,561] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:57,576] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffIntString(int,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:57,578] INFO Adding UDF name='datetostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:57,691] INFO Adding function datetostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.DateToString.dateToString(int,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:57,693] INFO Adding UDF name='stringtodate' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:57,728] INFO Adding function stringtodate for method public int io.confluent.ksql.function.udf.datetime.StringToDate.stringToDate(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:57,737] INFO Adding UDF name='stringtotimestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:57,776] INFO Adding function stringtotimestamp for method public long io.confluent.ksql.function.udf.datetime.StringToTimestamp.stringToTimestamp(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:57,777] INFO Adding UDF name='stringtotimestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:57,815] INFO Adding function stringtotimestamp for method public long io.confluent.ksql.function.udf.datetime.StringToTimestamp.stringToTimestamp(java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:57,818] INFO Adding UDF name='timestamptostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:57,837] INFO Adding function timestamptostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.TimestampToString.timestampToString(long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:57,838] INFO Adding UDF name='timestamptostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:57,881] INFO Adding function timestamptostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.TimestampToString.timestampToString(long,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:57,892] INFO Adding UDF name='unix_date' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:57,896] INFO Adding function unix_date for method public int io.confluent.ksql.function.udf.datetime.UnixDate.unixDate() (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:57,898] INFO Adding UDF name='unix_timestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:57,902] INFO Adding function unix_timestamp for method public long io.confluent.ksql.function.udf.datetime.UnixTimestamp.unixTimestamp() (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:57,926] INFO Adding UDF name='geo_distance' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:57,952] INFO Adding function geo_distance for method public java.lang.Double io.confluent.ksql.function.udf.geo.GeoDistance.geoDistance(double,double,double,double,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:57,954] INFO Adding UDF name='geo_distance' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:57,968] INFO Adding function geo_distance for method public java.lang.Double io.confluent.ksql.function.udf.geo.GeoDistance.geoDistance(double,double,double,double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:57,970] INFO Adding UDF name='AS_ARRAY' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,003] INFO Adding function AS_ARRAY for method public final java.util.List io.confluent.ksql.function.udf.list.AsArray.asArray(java.lang.Object[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,005] INFO Adding UDF name='slice' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,053] INFO Adding function slice for method public java.util.List io.confluent.ksql.function.udf.list.Slice.slice(java.util.List,java.lang.Integer,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,055] INFO Adding UDF name='AS_MAP' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,086] INFO Adding function AS_MAP for method public final java.util.Map io.confluent.ksql.function.udf.map.AsMap.asMap(java.util.List,java.util.List) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,112] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,125] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,126] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,139] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,140] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,154] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,155] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,170] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,198] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,219] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,220] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,252] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,254] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,295] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,296] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,343] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,344] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,356] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,358] INFO Adding UDF name='elt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,377] INFO Adding function elt for method public java.lang.String io.confluent.ksql.function.udf.string.Elt.elt(int,java.lang.String[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,379] INFO Adding UDF name='field' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,394] INFO Adding function field for method public int io.confluent.ksql.function.udf.string.Field.field(java.lang.String,java.lang.String[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,396] INFO Adding UDF name='mask_keep_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,434] INFO Adding function mask_keep_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepLeftKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,435] INFO Adding UDF name='mask_keep_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,447] INFO Adding function mask_keep_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepLeftKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,449] INFO Adding UDF name='mask_keep_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,476] INFO Adding function mask_keep_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepRightKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,477] INFO Adding UDF name='mask_keep_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,496] INFO Adding function mask_keep_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepRightKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,500] INFO Adding UDF name='mask' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,524] INFO Adding function mask for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKudf.mask(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,525] INFO Adding UDF name='mask' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,538] INFO Adding function mask for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKudf.mask(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,540] INFO Adding UDF name='mask_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,556] INFO Adding function mask_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskLeftKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,556] INFO Adding UDF name='mask_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,573] INFO Adding function mask_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskLeftKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,575] INFO Adding UDF name='mask_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,593] INFO Adding function mask_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskRightKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,594] INFO Adding UDF name='mask_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,612] INFO Adding function mask_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskRightKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,613] INFO Adding UDF name='split' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,651] INFO Adding function split for method public java.util.List io.confluent.ksql.function.udf.string.SplitKudf.split(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,654] INFO Adding UDF name='substring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,668] INFO Adding function substring for method public java.lang.String io.confluent.ksql.function.udf.string.Substring.substring(java.lang.String,java.lang.Integer,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,669] INFO Adding UDF name='substring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,681] INFO Adding function substring for method public java.lang.String io.confluent.ksql.function.udf.string.Substring.substring(java.lang.String,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,683] INFO Adding UDF name='url_decode_param' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,697] INFO Adding function url_decode_param for method public java.lang.String io.confluent.ksql.function.udf.url.UrlDecodeParamKudf.decodeParam(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,698] INFO Adding UDF name='url_encode_param' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,730] INFO Adding function url_encode_param for method public java.lang.String io.confluent.ksql.function.udf.url.UrlEncodeParamKudf.encodeParam(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,731] INFO Adding UDF name='url_extract_fragment' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,756] INFO Adding function url_extract_fragment for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractFragmentKudf.extractFragment(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,758] INFO Adding UDF name='url_extract_host' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,790] INFO Adding function url_extract_host for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractHostKudf.extractHost(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,792] INFO Adding UDF name='url_extract_parameter' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,924] INFO Adding function url_extract_parameter for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractParameterKudf.extractParam(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,925] INFO Adding UDF name='url_extract_path' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:58,945] INFO Adding function url_extract_path for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractPathKudf.extractPath(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:58,947] INFO Adding UDF name='url_extract_port' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:59,009] INFO Adding function url_extract_port for method public java.lang.Integer io.confluent.ksql.function.udf.url.UrlExtractPortKudf.extractPort(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:59,010] INFO Adding UDF name='url_extract_protocol' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:59,031] INFO Adding function url_extract_protocol for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractProtocolKudf.extractProtocol(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:59,032] INFO Adding UDF name='url_extract_query' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:59,049] INFO Adding function url_extract_query for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractQueryKudf.extractQuery(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:59,051] INFO Adding UDF name='E2EConfigurableUdf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 13:58:59,091] INFO Adding function E2EConfigurableUdf for method public long io.confluent.ksql.integration.EndToEndIntegrationTest$ConfigurableUdf.foo(long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 13:58:59,100] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 13:58:59,178] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 13:58:59,206] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 13:58:59,231] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 13:58:59,275] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 13:58:59,314] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 13:58:59,369] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 13:58:59,398] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 13:58:59,477] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 13:58:59,504] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 13:58:59,576] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 13:58:59,605] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 13:58:59,636] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 13:58:59,658] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 13:58:59,757] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 13:58:59,791] INFO Adding UDAF name=histogram from path=internal class=class io.confluent.ksql.function.udaf.map.HistogramUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 13:58:59,812] INFO Adding UDAF name=WindowEnd from path=internal class=class io.confluent.ksql.function.udaf.window.WindowEndKudaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 13:58:59,841] INFO Adding UDAF name=WindowStart from path=internal class=class io.confluent.ksql.function.udaf.window.WindowStartKudaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 13:58:59,975] INFO KafkaJsonDeserializerConfig values: 
	json.fail.unknown.properties = true
	json.key.type = class io.confluent.ksql.rest.server.computation.CommandId
	json.value.type = class java.lang.Object
 (io.confluent.kafka.serializers.KafkaJsonDeserializerConfig:347)
[2019-08-12 13:59:00,412] INFO KafkaJsonDeserializerConfig values: 
	json.fail.unknown.properties = true
	json.key.type = class java.lang.Object
	json.value.type = class io.confluent.ksql.rest.server.computation.Command
 (io.confluent.kafka.serializers.KafkaJsonDeserializerConfig:347)
[2019-08-12 13:59:00,497] INFO KafkaJsonSerializerConfig values: 
	json.indent.output = false
 (io.confluent.kafka.serializers.KafkaJsonSerializerConfig:347)
[2019-08-12 13:59:00,497] INFO KafkaJsonSerializerConfig values: 
	json.indent.output = false
 (io.confluent.kafka.serializers.KafkaJsonSerializerConfig:347)
[2019-08-12 13:59:01,444] INFO DataStax Java driver for Apache Cassandra(R) (com.datastax.oss:java-driver-core) version 4.1.0 (com.datastax.oss.driver.internal.core.DefaultMavenCoordinates:37)
[2019-08-12 13:59:02,082] INFO Using native clock for microsecond precision (com.datastax.oss.driver.internal.core.time.Clock:40)
[2019-08-12 13:59:02,844] INFO Logging initialized @8561ms to org.eclipse.jetty.util.log.Slf4jLog (org.eclipse.jetty.util.log:193)
[2019-08-12 13:59:02,848] INFO Starting server (io.confluent.ksql.rest.server.KsqlServerMain:73)
[2019-08-12 13:59:03,067] INFO Adding listener: http://0.0.0.0:8088 (io.confluent.rest.Application:241)
[2019-08-12 13:59:03,581] INFO jetty-9.4.18.v20190429; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_211-b12 (org.eclipse.jetty.server.Server:370)
[2019-08-12 13:59:03,655] INFO DefaultSessionIdManager workerName=node0 (org.eclipse.jetty.server.session:365)
[2019-08-12 13:59:03,655] INFO No SessionScavenger set, using defaults (org.eclipse.jetty.server.session:370)
[2019-08-12 13:59:03,657] INFO node0 Scavenging every 660000ms (org.eclipse.jetty.server.session:149)
[2019-08-12 13:59:04,658] INFO HV000001: Hibernate Validator 5.1.3.Final (org.hibernate.validator.internal.util.Version:27)
[2019-08-12 13:59:04,844] INFO Started o.e.j.s.ServletContextHandler@57bd6a8f{/,null,AVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:855)
[2019-08-12 13:59:04,898] INFO Started o.e.j.s.ServletContextHandler@12fcb2c3{/ws,null,AVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:855)
[2019-08-12 13:59:04,928] INFO Started NetworkTrafficServerConnector@3a1b36a1{HTTP/1.1,[http/1.1]}{0.0.0.0:8088} (org.eclipse.jetty.server.AbstractConnector:292)
[2019-08-12 13:59:04,928] INFO Started @10646ms (org.eclipse.jetty.server.Server:410)
[2019-08-12 13:59:04,930] WARN Creating topic _confluent-ksql-default__command_topic with replication factor of 1 which is less than 2. This is not advisable in a production environment.  (io.confluent.ksql.rest.util.KsqlInternalTopicUtils:75)
[2019-08-12 13:59:04,982] INFO Corrected retention.ms on ksql internal topic. topic:_confluent-ksql-default__command_topic, retention.ms:9223372036854775807 (io.confluent.ksql.rest.util.KsqlInternalTopicUtils:99)
[2019-08-12 13:59:05,109] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:05,109] INFO Build logical plan for CREATE STREAM KSQL_COMMANDS (STATEMENT STRING) WITH(VALUE_FORMAT='JSON', KAFKA_TOPIC='_confluent-ksql-default__command_topic');. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 13:59:05,111] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:05,143] INFO ProcessingLogConfig values: 
	ksql.logging.processing.rows.include = false
	ksql.logging.processing.stream.auto.create = false
	ksql.logging.processing.stream.name = KSQL_PROCESSING_LOG
	ksql.logging.processing.topic.auto.create = false
	ksql.logging.processing.topic.name = 
	ksql.logging.processing.topic.partitions = 1
	ksql.logging.processing.topic.replication.factor = 1
 (io.confluent.ksql.logging.processing.ProcessingLogConfig:347)
[2019-08-12 13:59:05,375] INFO 127.0.0.1 - - [12/Aug/2019:20:59:05 +0000] "POST /ksql HTTP/1.1" 503 113  298 (io.confluent.rest-utils.requests:62)
[2019-08-12 13:59:06,429] INFO 127.0.0.1 - - [12/Aug/2019:20:59:06 +0000] "POST /ksql HTTP/1.1" 503 113  4 (io.confluent.rest-utils.requests:62)
[2019-08-12 13:59:07,019] INFO 127.0.0.1 - - [12/Aug/2019:20:59:07 +0000] "POST /ksql HTTP/1.1" 503 113  2 (io.confluent.rest-utils.requests:62)
[2019-08-12 13:59:07,579] INFO 127.0.0.1 - - [12/Aug/2019:20:59:07 +0000] "POST /ksql HTTP/1.1" 503 113  3 (io.confluent.rest-utils.requests:62)
[2019-08-12 13:59:08,123] INFO 127.0.0.1 - - [12/Aug/2019:20:59:08 +0000] "POST /ksql HTTP/1.1" 503 113  3 (io.confluent.rest-utils.requests:62)
[2019-08-12 13:59:08,651] INFO 127.0.0.1 - - [12/Aug/2019:20:59:08 +0000] "POST /ksql HTTP/1.1" 503 113  2 (io.confluent.rest-utils.requests:62)
[2019-08-12 13:59:09,297] INFO 127.0.0.1 - - [12/Aug/2019:20:59:09 +0000] "POST /ksql HTTP/1.1" 503 113  2 (io.confluent.rest-utils.requests:62)
[2019-08-12 13:59:10,140] INFO 127.0.0.1 - - [12/Aug/2019:20:59:10 +0000] "POST /ksql HTTP/1.1" 503 113  3 (io.confluent.rest-utils.requests:62)
[2019-08-12 13:59:10,603] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:10,609] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:10,610] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:10,610] INFO Build logical plan for CREATE STREAM KSQL_PROCESSING_LOG (LOGGER STRING, LEVEL STRING, `TIME` BIGINT, MESSAGE STRUCT<`type` INTEGER, deserializationError STRUCT<errorMessage STRING, recordB64 STRING, cause ARRAY<STRING>>, recordProcessingError STRUCT<errorMessage STRING, record STRING, cause ARRAY<STRING>>, productionError STRUCT<errorMessage STRING>>) WITH (VALUE_FORMAT='JSON', KAFKA_TOPIC='default_ksql_processing_log');. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 13:59:10,610] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:10,615] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:10,616] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:10,617] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:10,617] INFO Build logical plan for CREATE STREAM PAGEVIEWS (viewtime BIGINT, userid VARCHAR, pageid VARCHAR) WITH (kafka_topic='pageviews', value_format='AVRO');. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 13:59:10,617] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:10,640] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:10,647] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:10,654] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:10,801] INFO 127.0.0.1 - - [12/Aug/2019:20:59:10 +0000] "POST /ksql HTTP/1.1" 503 113  2 (io.confluent.rest-utils.requests:62)
[2019-08-12 13:59:10,924] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:10,926] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:10,926] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:10,927] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:10,927] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:10,930] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:10,931] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:10,932] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:10,933] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:10,933] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:10,933] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:10,933] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:10,934] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:10,937] WARN Writing to metrics Kafka topic will be disabled (io.confluent.support.metrics.PhoneHomeConfig:61)
[2019-08-12 13:59:10,937] INFO No customer ID configured -- falling back to id 'anonymous' (io.confluent.support.metrics.BaseSupportConfig:336)
[2019-08-12 13:59:10,937] WARN Enforcing customer ID 'anonymous' (io.confluent.support.metrics.PhoneHomeConfig:66)
[2019-08-12 13:59:10,945] WARN Please note that the version check feature of KSQL is enabled.  With this enabled, this instance is configured to collect and report anonymously the version information to Confluent, Inc. ("Confluent") or its parent, subsidiaries, affiliates or service providers every 24hours.  This Metadata may be transferred to any country in which Confluent maintains facilities.  For a more in depth discussion of how Confluent processes such information, please read our Privacy Policy located at http://www.confluent.io/privacy. By proceeding with `confluent.support.metrics.enable=true`, you agree to all such collection, transfer and use of Version information by Confluent. You can turn the version check  feature off by setting `confluent.support.metrics.enable=false` in the KSQL configuration and restarting the KSQL.  See the Confluent Platform documentation for further information. (io.confluent.ksql.version.metrics.KsqlVersionCheckerAgent:90)
[2019-08-12 13:59:10,945] INFO Waiting until monitored service is ready for metrics collection (io.confluent.support.metrics.BaseMetricsReporter:189)
[2019-08-12 13:59:10,945] INFO Monitored service is now ready (io.confluent.support.metrics.BaseMetricsReporter:200)
[2019-08-12 13:59:10,945] INFO Attempting to collect and submit metrics (io.confluent.support.metrics.BaseMetricsReporter:160)
[2019-08-12 13:59:10,945] INFO Server up and running (io.confluent.ksql.rest.server.KsqlServerMain:75)
[2019-08-12 13:59:11,478] INFO Successfully submitted metrics to Confluent via secure endpoint (io.confluent.support.metrics.submitters.ConfluentSubmitter:143)
[2019-08-12 13:59:12,317] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:12,375] INFO 127.0.0.1 - - [12/Aug/2019:20:59:12 +0000] "POST /ksql HTTP/1.1" 200 77  206 (io.confluent.rest-utils.requests:62)
[2019-08-12 13:59:14,301] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:14,307] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:14,308] INFO Build logical plan for select * from pageviews;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 13:59:14,386] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:14,398] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:14,399] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:14,399] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:14,400] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:14,400] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:14,400] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:14,400] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:14,401] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:14,401] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:14,401] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:14,401] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:14,402] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:14,402] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:14,402] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:14,402] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:14,403] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:14,576] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:14,576] INFO Build logical plan for select * from pageviews;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 13:59:14,578] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:14,579] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:14,579] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:14,580] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:14,580] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:14,581] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:14,581] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:14,581] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:14,581] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:14,582] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:14,582] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:14,582] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:14,583] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:14,583] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:14,583] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:14,584] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:14,584] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:14,775] INFO 127.0.0.1 - - [12/Aug/2019:20:59:14 +0000] "POST /ksql HTTP/1.1" 200 1740  486 (io.confluent.rest-utils.requests:62)
[2019-08-12 13:59:14,874] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:14,875] INFO Build logical plan for select * from pageviews;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 13:59:14,876] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:14,876] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:14,877] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:14,877] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:14,877] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:14,878] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:14,878] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:14,878] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:14,878] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:14,879] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:14,879] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:14,879] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:14,879] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:14,880] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:14,880] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:14,880] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:14,880] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:15,036] INFO Starting query with application id: _confluent-ksql-default_transient_1685313674767754459_1565643554899 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 13:59:15,045] INFO Streaming query 'select * from pageviews;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 13:59:15,216] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:15,217] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:15,217] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:15,217] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:16,602] WARN Query terminated due to exception:org.eclipse.jetty.io.EofException (io.confluent.ksql.rest.server.resources.streaming.QueryStreamWriter:87)
[2019-08-12 13:59:16,813] INFO 127.0.0.1 - - [12/Aug/2019:20:59:14 +0000] "POST /query HTTP/1.1" 200 3584  1958 (io.confluent.rest-utils.requests:62)
[2019-08-12 13:59:25,135] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:25,145] INFO 127.0.0.1 - - [12/Aug/2019:20:59:25 +0000] "POST /ksql HTTP/1.1" 200 253  19 (io.confluent.rest-utils.requests:62)
[2019-08-12 13:59:48,717] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:48,718] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:48,718] INFO Build logical plan for select * from pageviews where rowtime > '2019' limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 13:59:48,719] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:48,719] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:48,720] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:48,720] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:48,720] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:48,721] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:48,721] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:48,721] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:48,721] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:48,721] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:48,721] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:48,722] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:48,722] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:48,722] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:48,722] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:48,722] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:48,723] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:48,799] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:48,799] INFO Build logical plan for select * from pageviews where rowtime > '2019' limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 13:59:48,800] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:48,801] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:48,801] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:48,801] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:48,802] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:48,802] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:48,802] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:48,802] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:48,803] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:48,803] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:48,803] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:48,803] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:48,804] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:48,804] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:48,804] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:48,804] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:48,805] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:48,916] INFO 127.0.0.1 - - [12/Aug/2019:20:59:48 +0000] "POST /ksql HTTP/1.1" 200 2159  210 (io.confluent.rest-utils.requests:62)
[2019-08-12 13:59:48,958] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:48,960] INFO Build logical plan for select * from pageviews where rowtime > '2019' limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 13:59:48,962] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 13:59:48,963] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:48,964] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:48,964] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:48,964] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:48,965] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:48,965] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:48,965] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:48,965] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:48,966] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:48,966] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:48,966] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:48,966] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:48,967] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:48,967] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:48,967] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:48,968] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:49,096] INFO Starting query with application id: _confluent-ksql-default_transient_2837909503384209326_1565643589000 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 13:59:49,098] INFO Streaming query 'select * from pageviews where rowtime > '2019' limit 5;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 13:59:49,218] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 13:59:49,219] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 13:59:49,219] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 13:59:49,220] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 13:59:59,483] INFO 127.0.0.1 - - [12/Aug/2019:20:59:48 +0000] "POST /query HTTP/1.1" 200 720  10534 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:00:03,556] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:00:03,557] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:00:03,557] INFO Build logical plan for select * from pageviews where rowtime > '2d19' limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:00:03,558] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:00:03,559] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:00:03,559] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:00:03,560] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:00:03,560] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:00:03,560] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:00:03,561] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:00:03,561] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:00:03,561] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:00:03,562] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:00:03,562] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:00:03,562] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:00:03,562] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:00:03,563] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:00:03,563] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:00:03,563] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:00:03,564] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:00:03,609] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:00:03,609] INFO Build logical plan for select * from pageviews where rowtime > '2d19' limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:00:03,610] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:00:03,611] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:00:03,611] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:00:03,611] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:00:03,611] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:00:03,612] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:00:03,612] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:00:03,612] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:00:03,613] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:00:03,613] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:00:03,613] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:00:03,613] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:00:03,614] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:00:03,614] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:00:03,614] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:00:03,614] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:00:03,615] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:00:03,713] INFO 127.0.0.1 - - [12/Aug/2019:21:00:03 +0000] "POST /ksql HTTP/1.1" 200 2159  167 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:00:03,751] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:00:03,752] INFO Build logical plan for select * from pageviews where rowtime > '2d19' limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:00:03,754] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:00:03,754] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:00:03,754] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:00:03,755] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:00:03,755] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:00:03,755] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:00:03,755] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:00:03,756] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:00:03,756] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:00:03,756] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:00:03,756] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:00:03,757] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:00:03,757] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:00:03,757] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:00:03,757] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:00:03,758] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:00:03,758] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:00:03,847] INFO Starting query with application id: _confluent-ksql-default_transient_276307047777801833_1565643603784 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 14:00:03,850] INFO Streaming query 'select * from pageviews where rowtime > '2d19' limit 5;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 14:00:03,961] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:00:03,962] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:00:03,962] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:00:03,962] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:00:11,878] WARN Query terminated due to exception:org.eclipse.jetty.io.EofException (io.confluent.ksql.rest.server.resources.streaming.QueryStreamWriter:87)
[2019-08-12 14:00:11,988] INFO 127.0.0.1 - - [12/Aug/2019:21:00:03 +0000] "POST /query HTTP/1.1" 200 7  8245 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:01:16,669] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:01:16,671] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:01:16,671] INFO Build logical plan for select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-01', 'yyyy-MM-dd') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:01:16,672] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:01:16,673] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:01:16,673] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:01:16,674] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:01:16,674] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:01:16,674] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:01:16,674] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:01:16,675] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:01:16,675] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:01:16,675] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:01:16,675] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:01:16,676] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:01:16,676] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:01:16,676] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:01:16,676] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:01:16,676] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:01:16,676] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:01:16,714] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:01:16,715] INFO Build logical plan for select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-01', 'yyyy-MM-dd') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:01:16,715] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:01:16,716] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:01:16,716] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:01:16,717] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:01:16,717] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:01:16,717] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:01:16,717] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:01:16,718] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:01:16,718] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:01:16,718] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:01:16,719] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:01:16,719] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:01:16,719] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:01:16,720] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:01:16,720] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:01:16,720] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:01:16,720] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:01:16,821] INFO 127.0.0.1 - - [12/Aug/2019:21:01:16 +0000] "POST /ksql HTTP/1.1" 200 2237  161 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:01:16,859] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:01:16,860] INFO Build logical plan for select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-01', 'yyyy-MM-dd') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:01:16,861] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:01:16,861] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:01:16,861] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:01:16,862] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:01:16,862] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:01:16,862] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:01:16,862] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:01:16,863] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:01:16,863] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:01:16,863] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:01:16,864] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:01:16,864] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:01:16,864] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:01:16,864] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:01:16,865] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:01:16,865] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:01:16,865] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:01:16,972] INFO Starting query with application id: _confluent-ksql-default_transient_5518507834098270611_1565643676889 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 14:01:16,975] INFO Streaming query 'select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-01', 'yyyy-MM-dd') limit 5;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 14:01:17,085] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:01:17,085] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:01:17,085] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:01:17,086] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:01:17,425] INFO 127.0.0.1 - - [12/Aug/2019:21:01:16 +0000] "POST /query HTTP/1.1" 200 720  574 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:01:45,651] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:01:45,652] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:01:45,652] INFO Build logical plan for select * from pageviews where rowtime > concat() limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:01:45,653] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:01:45,654] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:01:45,654] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:01:45,654] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:01:45,654] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:01:45,655] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:01:45,655] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:01:45,655] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:01:45,655] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:01:45,656] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:01:45,656] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:01:45,656] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:01:45,656] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:01:45,657] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:01:45,657] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:01:45,657] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:01:45,657] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:01:45,680] INFO 127.0.0.1 - - [12/Aug/2019:21:01:45 +0000] "POST /ksql HTTP/1.1" 400 299  36 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:02:00,716] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:02:00,718] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:02:00,718] INFO Build logical plan for select * from pageviews where rowtime > concat('2019', '-01-01') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:02:00,719] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:02:00,719] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:02:00,720] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:02:00,720] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:02:00,720] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:02:00,721] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:02:00,721] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:02:00,722] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:02:00,722] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:02:00,723] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:02:00,723] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:02:00,724] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:02:00,724] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:02:00,725] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:02:00,725] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:02:00,725] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:02:00,725] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:02:00,738] INFO 127.0.0.1 - - [12/Aug/2019:21:02:00 +0000] "POST /ksql HTTP/1.1" 400 559  30 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:02:24,147] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:02:24,148] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:02:24,148] INFO Build logical plan for select * from pageviews where rowtime = concat('2019', '-01-01') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:02:24,149] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:02:24,149] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:02:24,149] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:02:24,149] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:02:24,150] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:02:24,150] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:02:24,150] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:02:24,150] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:02:24,150] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:02:24,150] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:02:24,151] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:02:24,151] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:02:24,151] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:02:24,152] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:02:24,152] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:02:24,152] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:02:24,152] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:02:24,161] INFO 127.0.0.1 - - [12/Aug/2019:21:02:24 +0000] "POST /ksql HTTP/1.1" 400 559  21 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:03:01,733] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:01,735] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:03:01,735] INFO Build logical plan for select * from pageviews where rowtime > trim('fd') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:03:01,736] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:03:01,737] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:01,737] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:01,737] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:01,737] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:01,738] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:01,738] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:01,738] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:01,739] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:01,739] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:01,739] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:01,739] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:01,739] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:01,740] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:01,740] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:01,740] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:01,740] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:01,747] INFO 127.0.0.1 - - [12/Aug/2019:21:03:01 +0000] "POST /ksql HTTP/1.1" 400 517  21 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:03:16,242] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:16,243] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:03:16,244] INFO Build logical plan for select * from pageviews where userid = trim('User_2') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:03:16,245] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:03:16,246] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:16,246] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:16,246] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:16,247] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:16,247] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:16,247] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:16,248] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:16,248] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:16,248] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:16,249] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:16,249] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:16,249] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:16,250] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:16,250] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:16,250] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:16,250] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:16,291] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:03:16,291] INFO Build logical plan for select * from pageviews where userid = trim('User_2') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:03:16,292] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:03:16,293] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:16,293] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:16,293] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:16,293] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:16,293] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:16,294] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:16,294] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:16,294] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:16,294] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:16,294] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:16,294] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:16,295] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:16,295] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:16,295] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:16,295] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:16,295] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:16,388] INFO 127.0.0.1 - - [12/Aug/2019:21:03:16 +0000] "POST /ksql HTTP/1.1" 200 2173  152 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:03:16,413] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:03:16,413] INFO Build logical plan for select * from pageviews where userid = trim('User_2') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:03:16,414] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:03:16,414] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:16,415] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:16,415] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:16,415] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:16,416] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:16,416] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:16,416] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:16,416] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:16,417] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:16,417] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:16,417] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:16,417] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:16,418] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:16,418] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:16,418] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:16,418] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:16,518] INFO Starting query with application id: _confluent-ksql-default_transient_482403773702233420_1565643796464 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 14:03:16,520] INFO Streaming query 'select * from pageviews where userid = trim('User_2') limit 5;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 14:03:16,633] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:16,633] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:16,634] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:16,634] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:18,540] INFO 127.0.0.1 - - [12/Aug/2019:21:03:16 +0000] "POST /query HTTP/1.1" 200 720  2133 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:03:26,503] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:26,504] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:03:26,505] INFO Build logical plan for select * from pageviews where viewtime = trim('User_2') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:03:26,505] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:03:26,506] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:26,506] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:26,506] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:26,507] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:26,507] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:26,507] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:26,507] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:26,508] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:26,508] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:26,508] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:26,508] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:26,508] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:26,509] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:03:26,509] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:03:26,509] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:03:26,509] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:03:26,516] INFO 127.0.0.1 - - [12/Aug/2019:21:03:26 +0000] "POST /ksql HTTP/1.1" 400 532  18 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:06:45,212] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:06:45,213] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:06:45,213] INFO Build logical plan for select * from pageviews where cast(rowtime as bigint) > '2019' limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:06:45,214] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:06:45,214] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:06:45,215] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:06:45,215] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:06:45,215] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:06:45,215] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:06:45,215] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:06:45,215] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:06:45,215] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:06:45,216] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:06:45,216] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:06:45,216] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:06:45,216] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:06:45,216] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:06:45,216] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:06:45,216] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:06:45,217] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:06:45,225] INFO 127.0.0.1 - - [12/Aug/2019:21:06:45 +0000] "POST /ksql HTTP/1.1" 400 553  35 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:29:30,664] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:30,665] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:29:30,666] INFO Build logical plan for select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-ll', 'yyyy-MM-dd') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:29:30,666] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:29:30,667] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:30,667] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:30,667] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:30,667] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:30,668] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:30,668] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:30,668] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:30,668] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:30,669] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:30,669] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:30,669] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:30,669] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:30,670] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:30,670] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:30,670] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:30,670] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:30,707] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:29:30,707] INFO Build logical plan for select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-ll', 'yyyy-MM-dd') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:29:30,708] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:29:30,708] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:30,709] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:30,709] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:30,709] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:30,709] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:30,709] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:30,710] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:30,710] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:30,710] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:30,710] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:30,710] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:30,710] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:30,711] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:30,711] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:30,711] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:30,711] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:30,817] INFO 127.0.0.1 - - [12/Aug/2019:21:29:30 +0000] "POST /ksql HTTP/1.1" 200 2237  161 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:29:30,845] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:29:30,846] INFO Build logical plan for select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-ll', 'yyyy-MM-dd') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:29:30,847] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:29:30,847] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:30,848] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:30,848] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:30,848] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:30,849] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:30,849] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:30,849] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:30,849] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:30,850] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:30,850] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:30,850] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:30,850] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:30,850] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:30,851] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:30,851] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:30,851] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:30,921] INFO Starting query with application id: _confluent-ksql-default_transient_6921727388359010193_1565645370872 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 14:29:30,922] INFO Streaming query 'select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-ll', 'yyyy-MM-dd') limit 5;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 14:29:31,034] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:31,035] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:31,035] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:31,035] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:36,942] WARN Query terminated due to exception:org.eclipse.jetty.io.EofException (io.confluent.ksql.rest.server.resources.streaming.QueryStreamWriter:87)
[2019-08-12 14:29:37,042] INFO 127.0.0.1 - - [12/Aug/2019:21:29:30 +0000] "POST /query HTTP/1.1" 200 5  6202 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:29:48,998] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:48,999] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:29:49,000] INFO Build logical plan for select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-ll', 'yyyy-MM-dd') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:29:49,001] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:29:49,002] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:49,002] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:49,002] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:49,002] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:49,002] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:49,003] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:49,003] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:49,003] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:49,003] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:49,003] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:49,004] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:49,004] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:49,004] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:49,004] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:49,004] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:49,004] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:49,031] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:29:49,031] INFO Build logical plan for select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-ll', 'yyyy-MM-dd') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:29:49,032] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:29:49,032] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:49,033] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:49,033] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:49,033] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:49,033] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:49,033] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:49,034] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:49,034] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:49,034] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:49,034] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:49,034] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:49,034] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:49,035] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:49,035] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:49,035] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:49,035] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:49,110] INFO 127.0.0.1 - - [12/Aug/2019:21:29:48 +0000] "POST /ksql HTTP/1.1" 200 2237  120 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:29:49,137] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:29:49,138] INFO Build logical plan for select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-ll', 'yyyy-MM-dd') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:29:49,139] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:29:49,139] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:49,139] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:49,140] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:49,140] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:49,140] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:49,140] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:49,140] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:49,140] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:49,140] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:49,141] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:49,141] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:49,141] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:49,141] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:49,141] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:49,142] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:49,142] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:49,224] INFO Starting query with application id: _confluent-ksql-default_transient_3486264332474678802_1565645389160 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 14:29:49,226] INFO Streaming query 'select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-ll', 'yyyy-MM-dd') limit 5;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 14:29:49,339] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:49,339] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:49,339] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:49,339] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:58,215] WARN Query terminated due to exception:org.eclipse.jetty.io.EofException (io.confluent.ksql.rest.server.resources.streaming.QueryStreamWriter:87)
[2019-08-12 14:29:58,234] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:29:58,234] INFO Build logical plan for select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-ll', 'yyyy-MM-dd') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:29:58,235] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:29:58,236] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:29:58,237] INFO Build logical plan for select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-ll', 'yyyy-MM-dd') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:29:58,237] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:58,238] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:58,238] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:58,239] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:58,239] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:58,239] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:29:58,240] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:29:58,240] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:58,241] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:29:58,241] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:58,243] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:29:58,244] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:30:11,657] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:30:11,657] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:30:11,658] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:30:11,659] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:30:11,660] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:30:11,660] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:29:58,245] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:30:11,664] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:30:11,665] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:30:12,743] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:30:12,743] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:30:12,750] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:30:12,753] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:30:29,048] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:30:29,048] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:30:29,049] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:30:29,049] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:30:29,050] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:30:29,051] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:30:29,051] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:30:29,051] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:30:50,654] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:30:52,333] INFO Build logical plan for select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-ll', 'yyyy-MM-dd') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:30:52,335] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:30:52,339] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:30:52,836] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:30:52,837] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:30:52,838] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:30:52,839] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:30:52,840] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:30:52,841] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:30:52,842] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:30:52,842] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:30:52,843] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:30:52,844] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:30:52,844] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:30:53,329] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:30:53,337] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:30:53,339] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:30:53,339] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:30:53,353] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:30:53,354] INFO Build logical plan for select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-ll', 'yyyy-MM-dd') limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:30:53,815] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:30:53,829] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:30:53,829] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:30:53,829] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:30:53,830] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:30:53,830] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:30:53,830] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:30:53,831] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:30:53,831] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:30:53,831] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:30:53,832] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:30:54,182] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:30:54,184] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:30:54,185] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:30:54,186] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:30:54,187] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:30:54,188] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:30:57,498] INFO 127.0.0.1 - - [12/Aug/2019:21:29:49 +0000] "POST /query HTTP/1.1" 200 1  68365 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:30:57,719] INFO Starting query with application id: _confluent-ksql-default_transient_848798392407087437_1565645453353 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 14:30:57,721] INFO Streaming query 'select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-ll', 'yyyy-MM-dd') limit 5;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 14:30:57,730] INFO Starting query with application id: _confluent-ksql-default_transient_2304104849522072201_1565645454515 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 14:30:57,746] INFO Streaming query 'select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-ll', 'yyyy-MM-dd') limit 5;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 14:30:57,776] INFO Starting query with application id: _confluent-ksql-default_transient_145333209990376886_1565645457423 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 14:30:57,782] INFO Streaming query 'select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-ll', 'yyyy-MM-dd') limit 5;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 14:30:57,813] INFO Starting query with application id: _confluent-ksql-default_transient_7760042915588842911_1565645457443 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 14:30:57,816] INFO Streaming query 'select * from pageviews where rowtime > STRINGTOTIMESTAMP('2019-01-ll', 'yyyy-MM-dd') limit 5;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 14:30:57,844] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:30:57,844] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:30:57,845] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:30:57,845] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:32:24,729] WARN Query terminated due to exception:org.eclipse.jetty.io.EofException (io.confluent.ksql.rest.server.resources.streaming.QueryStreamWriter:87)
[2019-08-12 14:32:24,811] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:32:24,811] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:32:24,812] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:32:24,812] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:32:25,002] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:32:25,002] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:32:25,004] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:32:25,005] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:32:25,004] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:32:25,290] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:32:25,291] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:32:25,005] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:32:25,767] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:32:25,767] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:32:25,768] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:32:25,768] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:32:25,769] WARN Query terminated due to exception:org.eclipse.jetty.io.EofException (io.confluent.ksql.rest.server.resources.streaming.QueryStreamWriter:87)
[2019-08-12 14:32:25,769] WARN Query terminated due to exception:org.eclipse.jetty.io.EofException (io.confluent.ksql.rest.server.resources.streaming.QueryStreamWriter:87)
[2019-08-12 14:32:25,772] WARN Query terminated due to exception:org.eclipse.jetty.io.EofException (io.confluent.ksql.rest.server.resources.streaming.QueryStreamWriter:87)
[2019-08-12 14:32:26,270] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:32:26,270] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:32:26,270] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:32:26,270] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:32:32,077] INFO 127.0.0.1 - - [12/Aug/2019:21:30:50 +0000] "POST /query HTTP/1.1" 200 0  101425 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:32:32,100] INFO 127.0.0.1 - - [12/Aug/2019:21:30:12 +0000] "POST /query HTTP/1.1" 200 1  139352 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:32:42,043] INFO 127.0.0.1 - - [12/Aug/2019:21:29:55 +0000] "POST /query HTTP/1.1" 200 1  166673 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:32:42,117] INFO 127.0.0.1 - - [12/Aug/2019:21:29:55 +0000] "POST /query HTTP/1.1" 200 1  166747 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:34:29,493] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:34:29,497] INFO 127.0.0.1 - - [12/Aug/2019:21:34:29 +0000] "POST /ksql HTTP/1.1" 400 206  13 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:34:32,751] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:34:32,753] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:34:32,753] INFO Build logical plan for select ifnull(rowtime) from pageviews;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:34:32,757] INFO 127.0.0.1 - - [12/Aug/2019:21:34:32 +0000] "POST /ksql HTTP/1.1" 400 267  12 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:34:49,172] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:34:49,174] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:34:49,174] INFO Build logical plan for select ifnull(rowtime, rowtime) from pageviews;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:34:49,177] INFO 127.0.0.1 - - [12/Aug/2019:21:34:49 +0000] "POST /ksql HTTP/1.1" 400 293  10 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:35:21,369] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:35:21,371] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:35:21,371] INFO Build logical plan for select len(userid, userid) from pageviews;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:35:21,399] INFO 127.0.0.1 - - [12/Aug/2019:21:35:21 +0000] "POST /ksql HTTP/1.1" 400 282  38 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:35:27,477] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:35:27,478] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:35:27,479] INFO Build logical plan for select len(userid) from pageviews;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:35:27,479] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:35:27,479] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:35:27,480] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:35:27,480] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:35:27,480] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:35:27,480] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:35:27,481] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:35:27,481] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:35:27,481] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:35:27,481] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:35:27,481] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:35:27,481] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:35:27,481] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:35:27,482] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:35:27,482] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:35:27,482] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:35:27,482] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:35:27,494] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:35:27,495] INFO Build logical plan for select len(userid) from pageviews;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:35:27,495] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:35:27,496] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:35:27,496] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:35:27,496] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:35:27,496] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:35:27,497] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:35:27,497] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:35:27,497] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:35:27,497] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:35:27,498] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:35:27,498] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:35:27,498] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:35:27,499] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:35:27,499] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:35:27,499] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:35:27,499] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:35:27,500] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:35:27,565] INFO 127.0.0.1 - - [12/Aug/2019:21:35:27 +0000] "POST /ksql HTTP/1.1" 200 1388  94 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:35:27,591] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:35:27,592] INFO Build logical plan for select len(userid) from pageviews;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 14:35:27,593] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 14:35:27,593] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:35:27,593] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:35:27,593] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:35:27,594] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:35:27,594] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:35:27,594] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:35:27,594] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:35:27,594] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:35:27,595] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:35:27,595] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:35:27,595] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:35:27,595] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:35:27,595] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:35:27,595] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:35:27,595] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:35:27,596] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:35:27,656] INFO Starting query with application id: _confluent-ksql-default_transient_5032142197602421225_1565645727599 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 14:35:27,666] INFO Streaming query 'select len(userid) from pageviews;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 14:35:27,769] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 14:35:27,770] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 14:35:27,770] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 14:35:27,770] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:35:28,927] WARN Query terminated due to exception:org.eclipse.jetty.io.EofException (io.confluent.ksql.rest.server.resources.streaming.QueryStreamWriter:87)
[2019-08-12 14:35:29,021] INFO 127.0.0.1 - - [12/Aug/2019:21:35:27 +0000] "POST /query HTTP/1.1" 200 2024  1436 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:57:54,270] INFO 127.0.0.1 - - [12/Aug/2019:21:57:54 +0000] "GET /info HTTP/1.1" 200 116  37 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:57:54,406] INFO 127.0.0.1 - - [12/Aug/2019:21:57:54 +0000] "GET /info HTTP/1.1" 200 116  2 (io.confluent.rest-utils.requests:62)
[2019-08-12 14:58:03,571] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 14:58:03,574] INFO 127.0.0.1 - - [12/Aug/2019:21:58:03 +0000] "POST /ksql HTTP/1.1" 200 77  14 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:09:12,013] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,037] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 15:09:12,037] INFO Build logical plan for CREATE TABLE USER_VIEWS_PER_HOUR WITH (KAFKA_TOPIC='USER_VIEWS_PER_HOUR', PARTITIONS=1, REPLICAS=1) AS SELECT
  PAGEVIEWS.USERID "USERID",
  COUNT(*) "TOTAL"
FROM PAGEVIEWS PAGEVIEWS
WINDOW TUMBLING ( SIZE 1 HOURS ) 
GROUP BY PAGEVIEWS.USERID;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 15:09:12,057] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 15:09:12,057] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,058] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,058] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,058] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,058] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,058] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,058] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,058] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,059] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,059] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,059] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,059] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,059] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,059] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,059] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,060] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,072] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,073] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,073] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,073] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,073] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,073] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,074] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,074] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,074] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,074] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,075] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,075] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,075] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,075] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,075] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,076] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,091] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,091] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,091] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,091] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,092] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,092] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,092] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,092] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,092] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,092] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,093] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,093] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,093] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,093] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,093] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,094] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,138] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,138] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,138] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,138] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,138] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,138] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,139] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,139] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,139] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,139] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,139] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,139] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,139] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,140] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,140] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,140] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,217] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,222] INFO Creating topic 'USER_VIEWS_PER_HOUR' (io.confluent.ksql.services.KafkaTopicClient:100)
[2019-08-12 15:09:12,263] INFO Executing statement: CREATE TABLE USER_VIEWS_PER_HOUR WITH (KAFKA_TOPIC='USER_VIEWS_PER_HOUR', PARTITIONS=1, REPLICAS=1) AS SELECT
  PAGEVIEWS.USERID "USERID",
  COUNT(*) "TOTAL"
FROM PAGEVIEWS PAGEVIEWS
WINDOW TUMBLING ( SIZE 1 HOURS ) 
GROUP BY PAGEVIEWS.USERID; (io.confluent.ksql.rest.server.computation.CommandRunner:166)
[2019-08-12 15:09:12,268] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 15:09:12,269] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 15:09:12,270] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 15:09:12,270] INFO Build logical plan for CREATE TABLE USER_VIEWS_PER_HOUR WITH (KAFKA_TOPIC='USER_VIEWS_PER_HOUR', PARTITIONS=1, REPLICAS=1) AS SELECT
  PAGEVIEWS.USERID "USERID",
  COUNT(*) "TOTAL"
FROM PAGEVIEWS PAGEVIEWS
WINDOW TUMBLING ( SIZE 1 HOURS ) 
GROUP BY PAGEVIEWS.USERID;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 15:09:12,271] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 15:09:12,271] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,271] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,271] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,271] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,272] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,272] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,272] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,272] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,272] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,272] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,273] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,273] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,273] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,273] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,273] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,273] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,280] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,280] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,280] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,280] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,280] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,280] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,280] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,281] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,281] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,281] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,281] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,281] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,281] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,281] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,281] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,282] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,284] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,284] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,285] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,285] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,285] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,285] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,285] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,285] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,285] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,286] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,286] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,286] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,286] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,286] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,286] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,286] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,291] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,291] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,291] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,291] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,291] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,291] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,291] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,291] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,291] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,292] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,292] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,292] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,292] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,292] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,292] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,292] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,332] INFO Starting query with application id: _confluent-ksql-default_query_CTAS_USER_VIEWS_PER_HOUR_0 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 15:09:12,333] INFO Executed statement: CREATE TABLE USER_VIEWS_PER_HOUR WITH (KAFKA_TOPIC='USER_VIEWS_PER_HOUR', PARTITIONS=1, REPLICAS=1) AS SELECT
  PAGEVIEWS.USERID "USERID",
  COUNT(*) "TOTAL"
FROM PAGEVIEWS PAGEVIEWS
WINDOW TUMBLING ( SIZE 1 HOURS ) 
GROUP BY PAGEVIEWS.USERID; (io.confluent.ksql.rest.server.computation.CommandRunner:173)
[2019-08-12 15:09:12,363] INFO 127.0.0.1 - - [12/Aug/2019:22:09:11 +0000] "POST /ksql HTTP/1.1" 200 520  372 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:09:12,555] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,555] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,555] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,555] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,573] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,574] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,574] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,574] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,761] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,762] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,762] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,762] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,777] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,777] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,777] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,778] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:12,922] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:12,923] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:12,923] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:12,923] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:14,599] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:14,600] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:14,600] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:14,600] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,300] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,302] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 15:09:40,302] INFO Build logical plan for SELECT * FROM USER_VIEWS_PER_HOUR;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 15:09:40,303] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 15:09:40,304] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,304] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,305] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,305] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,305] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,305] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,306] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,306] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,306] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,306] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,307] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,307] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,307] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,307] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,307] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,308] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,309] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,309] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,310] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,310] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,310] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,310] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,310] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,310] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,311] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,311] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,311] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,311] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,311] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,311] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,311] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,311] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,343] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 15:09:40,343] INFO Build logical plan for SELECT * FROM USER_VIEWS_PER_HOUR;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 15:09:40,344] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 15:09:40,344] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,344] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,344] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,345] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,345] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,345] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,345] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,345] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,345] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,345] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,346] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,346] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,346] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,346] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,346] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,346] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,347] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,347] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,347] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,347] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,347] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,347] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,347] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,347] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,348] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,348] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,348] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,348] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,348] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,348] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,348] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,349] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,403] INFO 127.0.0.1 - - [12/Aug/2019:22:09:40 +0000] "POST /ksql HTTP/1.1" 200 2123  110 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:09:40,477] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 15:09:40,478] INFO Build logical plan for SELECT * FROM USER_VIEWS_PER_HOUR;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 15:09:40,482] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 15:09:40,482] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,483] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,483] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,483] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,484] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,484] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,485] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,485] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,486] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,486] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,486] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,487] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,487] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,487] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,487] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,487] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,488] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,488] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,488] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,488] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,489] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,489] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,489] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,489] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,490] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,490] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,490] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,490] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,490] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:40,491] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:40,491] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:40,491] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:40,594] INFO Starting query with application id: _confluent-ksql-default_transient_6941036228322411704_1565647780502 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 15:09:40,599] INFO Streaming query 'SELECT * FROM USER_VIEWS_PER_HOUR;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 15:09:41,240] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:41,240] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:41,241] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:41,241] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:41,255] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:41,255] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:41,255] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:41,256] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:42,717] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:09:42,717] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:09:42,718] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:09:42,718] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:09:48,896] WARN Query terminated due to exception:org.eclipse.jetty.io.EofException (io.confluent.ksql.rest.server.resources.streaming.QueryStreamWriter:87)
[2019-08-12 15:09:49,003] INFO 127.0.0.1 - - [12/Aug/2019:22:09:40 +0000] "POST /query HTTP/1.1" 200 4058  8532 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:17:20,849] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:17:21,573] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:17:21,576] INFO Executing statement: create materialized view asdf as select * from user_views_per_hour; (io.confluent.ksql.rest.server.computation.CommandRunner:166)
[2019-08-12 15:17:21,577] INFO Executed statement: create materialized view asdf as select * from user_views_per_hour; (io.confluent.ksql.rest.server.computation.CommandRunner:173)
[2019-08-12 15:17:21,579] INFO 127.0.0.1 - - [12/Aug/2019:22:17:20 +0000] "POST /ksql HTTP/1.1" 200 278  752 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:17:28,648] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:17:28,653] INFO 127.0.0.1 - - [12/Aug/2019:22:17:28 +0000] "POST /ksql HTTP/1.1" 200 478  12 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:17:28,782] INFO 127.0.0.1 - - [12/Aug/2019:22:17:28 +0000] "POST /query HTTP/1.1" 200 864  90 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:17:30,550] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:17:30,555] INFO 127.0.0.1 - - [12/Aug/2019:22:17:30 +0000] "POST /ksql HTTP/1.1" 200 478  12 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:17:30,635] INFO 127.0.0.1 - - [12/Aug/2019:22:17:30 +0000] "POST /query HTTP/1.1" 200 864  19 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:18:48,177] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:18:48,198] INFO 127.0.0.1 - - [12/Aug/2019:22:18:48 +0000] "POST /ksql HTTP/1.1" 200 478  29 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:18:48,233] INFO 127.0.0.1 - - [12/Aug/2019:22:18:48 +0000] "POST /query HTTP/1.1" 200 864  14 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:18:54,729] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:18:54,733] INFO 127.0.0.1 - - [12/Aug/2019:22:18:54 +0000] "POST /ksql HTTP/1.1" 200 406  11 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:18:54,784] INFO 127.0.0.1 - - [12/Aug/2019:22:18:54 +0000] "POST /query HTTP/1.1" 200 819  18 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:21:43,818] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:21:43,841] INFO 127.0.0.1 - - [12/Aug/2019:22:21:43 +0000] "POST /ksql HTTP/1.1" 200 406  31 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:22:28,877] INFO 127.0.0.1 - - [12/Aug/2019:22:21:43 +0000] "POST /query HTTP/1.1" 200 819  45023 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:22:32,190] INFO 127.0.0.1 - - [12/Aug/2019:22:22:28 +0000] "POST /query HTTP/1.1" 200 0  3330 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:22:32,603] INFO 127.0.0.1 - - [12/Aug/2019:22:22:28 +0000] "POST /query HTTP/1.1" 500 6179  3752 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:22:32,619] INFO 127.0.0.1 - - [12/Aug/2019:22:22:28 +0000] "POST /query HTTP/1.1" 200 819  3754 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:22:32,619] INFO 127.0.0.1 - - [12/Aug/2019:22:22:28 +0000] "POST /query HTTP/1.1" 200 819  3749 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:22:32,723] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:22:32,724] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:22:32,724] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:22:32,724] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:22:32,738] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:22:32,738] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:22:32,738] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:22:32,739] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:22:32,742] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:22:32,742] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:22:32,742] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:22:32,742] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:22:32,767] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:22:32,767] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:22:32,767] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:22:32,767] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:22:32,800] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:22:32,800] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:22:32,800] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:22:32,800] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:22:34,622] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:22:34,622] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:22:34,623] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:22:34,623] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:22:44,939] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:22:44,943] INFO 127.0.0.1 - - [12/Aug/2019:22:22:44 +0000] "POST /ksql HTTP/1.1" 200 406  10 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:23:35,506] INFO 127.0.0.1 - - [12/Aug/2019:22:22:45 +0000] "POST /query HTTP/1.1" 200 819  50492 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:24:07,671] INFO 127.0.0.1 - - [12/Aug/2019:22:23:20 +0000] "POST /query HTTP/1.1" 500 0  47435 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:24:08,187] INFO 127.0.0.1 - - [12/Aug/2019:22:23:20 +0000] "POST /query HTTP/1.1" 500 6179  47954 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:24:31,137] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:24:31,137] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:24:31,137] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:24:31,138] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:24:32,561] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:24:32,561] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:24:32,562] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:24:32,562] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:24:34,590] INFO 127.0.0.1 - - [12/Aug/2019:22:22:52 +0000] "POST /query HTTP/1.1" 200 0  101641 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:24:36,113] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:24:36,114] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:24:36,483] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:24:36,484] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:24:36,499] INFO 127.0.0.1 - - [12/Aug/2019:22:22:52 +0000] "POST /query HTTP/1.1" 200 819  103550 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:24:36,523] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:24:36,524] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:24:36,524] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:24:36,525] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:24:36,544] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:24:36,544] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:24:36,544] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:24:36,544] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:24:36,668] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 15:24:36,669] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 15:24:36,669] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 15:24:36,669] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:24:42,283] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:24:42,288] INFO 127.0.0.1 - - [12/Aug/2019:22:24:42 +0000] "POST /ksql HTTP/1.1" 200 406  10 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:24:52,746] INFO 127.0.0.1 - - [12/Aug/2019:22:24:42 +0000] "POST /query HTTP/1.1" 200 819  10435 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:24:52,792] INFO 127.0.0.1 - - [12/Aug/2019:22:24:52 +0000] "POST /query HTTP/1.1" 200 0  53 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:24:52,795] INFO 127.0.0.1 - - [12/Aug/2019:22:24:52 +0000] "POST /query HTTP/1.1" 200 819  55 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:24:55,888] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:24:55,892] INFO 127.0.0.1 - - [12/Aug/2019:22:24:55 +0000] "POST /ksql HTTP/1.1" 200 406  9 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:24:55,923] INFO 127.0.0.1 - - [12/Aug/2019:22:24:55 +0000] "POST /query HTTP/1.1" 200 819  16 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:27:43,772] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:27:43,802] INFO 127.0.0.1 - - [12/Aug/2019:22:27:43 +0000] "POST /ksql HTTP/1.1" 200 406  38 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:27:43,821] INFO 127.0.0.1 - - [12/Aug/2019:22:27:43 +0000] "POST /query HTTP/1.1" 200 819  15 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:28:43,615] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:28:43,619] INFO 127.0.0.1 - - [12/Aug/2019:22:28:43 +0000] "POST /ksql HTTP/1.1" 200 406  12 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:29:04,168] INFO 127.0.0.1 - - [12/Aug/2019:22:28:49 +0000] "POST /query HTTP/1.1" 200 0  14904 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:29:06,719] INFO 127.0.0.1 - - [12/Aug/2019:22:28:50 +0000] "POST /query HTTP/1.1" 200 819  16100 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:29:51,009] INFO 127.0.0.1 - - [12/Aug/2019:22:29:00 +0000] "POST /query HTTP/1.1" 200 819  50938 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:30:19,981] INFO 127.0.0.1 - - [12/Aug/2019:22:29:18 +0000] "POST /query HTTP/1.1" 500 6179  61046 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:32:07,972] INFO 127.0.0.1 - - [12/Aug/2019:22:28:43 +0000] "POST /query HTTP/1.1" 200 819  204339 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:37:00,497] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 15:37:04,658] INFO 127.0.0.1 - - [12/Aug/2019:22:37:00 +0000] "POST /ksql HTTP/1.1" 200 406  4167 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:37:08,260] INFO 127.0.0.1 - - [12/Aug/2019:22:37:00 +0000] "POST /query HTTP/1.1" 200 819  7741 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:37:09,464] INFO 127.0.0.1 - - [12/Aug/2019:22:37:04 +0000] "POST /query HTTP/1.1" 200 819  5008 (io.confluent.rest-utils.requests:62)
[2019-08-12 15:37:11,028] INFO 127.0.0.1 - - [12/Aug/2019:22:37:07 +0000] "POST /query HTTP/1.1" 200 819  3933 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:20:56,558] INFO 127.0.0.1 - - [12/Aug/2019:23:20:56 +0000] "GET /info HTTP/1.1" 200 116  1 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:20:56,701] INFO 127.0.0.1 - - [12/Aug/2019:23:20:56 +0000] "GET /info HTTP/1.1" 200 116  1 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:21:04,676] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:04,677] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:21:04,677] INFO Build logical plan for select * from pageviews limit 1;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 16:21:04,677] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:21:04,678] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:04,678] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:04,678] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:04,678] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:04,678] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:04,678] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:04,679] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:04,679] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:04,679] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:04,679] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:04,679] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:04,679] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:04,679] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:04,680] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:04,680] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:04,680] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:04,708] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:21:04,708] INFO Build logical plan for select * from pageviews limit 1;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 16:21:04,709] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:21:04,709] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:04,709] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:04,710] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:04,710] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:04,710] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:04,710] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:04,710] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:04,710] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:04,710] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:04,711] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:04,711] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:04,711] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:04,711] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:04,711] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:04,711] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:04,711] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:04,799] INFO 127.0.0.1 - - [12/Aug/2019:23:21:04 +0000] "POST /ksql HTTP/1.1" 200 1756  128 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:21:04,884] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:21:04,885] INFO Build logical plan for select * from pageviews limit 1;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 16:21:04,886] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:21:04,886] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:04,886] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:04,887] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:04,887] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:04,887] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:04,887] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:04,888] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:04,888] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:04,888] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:04,888] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:04,888] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:04,889] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:04,889] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:04,889] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:04,889] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:04,890] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:04,976] INFO Starting query with application id: _confluent-ksql-default_transient_5422007784104446782_1565652064904 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 16:21:04,982] INFO Streaming query 'select * from pageviews limit 1;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 16:21:05,091] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:05,092] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:05,092] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:05,092] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:05,225] INFO 127.0.0.1 - - [12/Aug/2019:23:21:04 +0000] "POST /query HTTP/1.1" 200 208  346 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:21:14,966] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:14,972] INFO 127.0.0.1 - - [12/Aug/2019:23:21:14 +0000] "POST /ksql HTTP/1.1" 200 186  11 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:21:27,302] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:27,303] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:21:27,303] INFO Build logical plan for select * from USER_VIEWS_PER_HOUR limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 16:21:27,304] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:21:32,287] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:32,288] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:32,291] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:32,291] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:32,293] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:32,294] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:32,298] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:32,298] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:32,300] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:32,300] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:32,301] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:32,303] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:32,304] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:32,305] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:32,306] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:32,306] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:32,316] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:32,317] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:32,318] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:32,319] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:32,321] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:32,321] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:32,322] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:32,322] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:32,322] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:32,323] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:32,323] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:32,323] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:32,324] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:32,324] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:32,325] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:32,325] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:32,351] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:21:32,351] INFO Build logical plan for select * from USER_VIEWS_PER_HOUR limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 16:21:32,351] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:21:38,198] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:38,200] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:38,201] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:38,202] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:38,203] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:38,203] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:38,203] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:38,204] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:38,226] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:38,226] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:38,227] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:38,227] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:38,228] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:38,228] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:38,229] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:38,233] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:38,235] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:38,235] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:38,236] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:38,236] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:38,237] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:38,237] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:38,237] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:38,238] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:38,238] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:38,238] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:38,238] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:38,239] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:38,239] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:38,239] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:38,239] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:38,239] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:38,324] INFO 127.0.0.1 - - [12/Aug/2019:23:21:27 +0000] "POST /ksql HTTP/1.1" 200 2139  11027 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:21:38,377] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:21:38,378] INFO Build logical plan for select * from USER_VIEWS_PER_HOUR limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 16:21:38,379] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:21:42,324] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:42,327] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:42,328] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:42,328] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:42,330] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:42,330] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:42,331] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:42,331] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:42,332] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:42,332] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:42,333] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:42,334] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:42,336] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:42,336] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:42,340] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:42,340] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:42,344] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:42,345] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:42,346] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:42,347] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:42,347] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:42,348] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:42,348] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:42,349] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:42,351] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:42,351] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:42,351] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:42,351] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:42,354] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:42,355] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:42,355] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:42,356] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:42,356] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:21:42,359] INFO Build logical plan for select * from USER_VIEWS_PER_HOUR limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 16:21:42,361] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:21:42,783] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:42,784] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:42,784] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:42,785] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:42,785] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:42,785] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:42,786] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:42,786] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:42,786] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:42,787] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:42,787] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:42,788] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:42,789] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:42,790] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:42,791] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:42,791] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:42,792] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:42,792] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:42,793] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:42,794] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:42,795] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:42,795] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:42,796] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:42,797] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:42,799] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:42,799] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:42,800] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:42,801] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:42,803] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:42,803] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:42,804] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:42,805] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:42,897] INFO Starting query with application id: _confluent-ksql-default_transient_8553450458019037976_1565652102810 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 16:21:42,898] INFO Streaming query 'select * from USER_VIEWS_PER_HOUR limit 5;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 16:21:42,981] INFO Starting query with application id: _confluent-ksql-default_transient_5777020162214508601_1565652102826 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 16:21:42,985] INFO Streaming query 'select * from USER_VIEWS_PER_HOUR limit 5;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 16:21:44,406] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:44,406] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:44,408] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:21:44,409] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:21:44,409] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:44,410] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:21:44,411] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:21:44,411] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:22:04,528] WARN Query terminated due to exception:org.eclipse.jetty.io.EofException (io.confluent.ksql.rest.server.resources.streaming.QueryStreamWriter:87)
[2019-08-12 16:22:04,824] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:22:04,826] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:22:04,826] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:22:04,835] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:22:04,862] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:22:04,863] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:22:04,863] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:22:04,864] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:22:04,959] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:22:04,960] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:22:04,960] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:22:04,961] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:22:04,961] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:22:04,962] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:22:04,963] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:22:04,966] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:22:05,091] INFO 127.0.0.1 - - [12/Aug/2019:23:21:38 +0000] "POST /query HTTP/1.1" 200 1  26717 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:22:05,242] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:22:05,242] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:22:05,242] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:22:05,242] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:22:05,253] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:22:05,254] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:22:05,254] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:22:05,254] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:22:05,263] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:22:05,263] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:22:05,263] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:22:05,263] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:22:07,265] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:22:07,266] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:22:07,266] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:22:07,266] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:22:07,284] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:22:07,288] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:22:07,289] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:22:07,289] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:22:09,551] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:22:09,552] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:22:09,552] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:22:09,552] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:22:09,587] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:22:09,588] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:22:09,588] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:22:09,588] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:22:09,759] INFO 127.0.0.1 - - [12/Aug/2019:23:21:42 +0000] "POST /query HTTP/1.1" 200 845  27418 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:22:22,074] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:22:22,078] INFO 127.0.0.1 - - [12/Aug/2019:23:22:22 +0000] "POST /ksql HTTP/1.1" 200 478  11 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:22:22,125] INFO 127.0.0.1 - - [12/Aug/2019:23:22:22 +0000] "POST /query HTTP/1.1" 200 1728  21 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:22:51,790] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:22:51,816] INFO 127.0.0.1 - - [12/Aug/2019:23:22:51 +0000] "POST /ksql HTTP/1.1" 200 478  33 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:22:51,853] INFO 127.0.0.1 - - [12/Aug/2019:23:22:51 +0000] "POST /query HTTP/1.1" 200 1728  32 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:23:02,488] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:23:02,492] INFO 127.0.0.1 - - [12/Aug/2019:23:23:02 +0000] "POST /ksql HTTP/1.1" 200 478  10 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:23:11,270] INFO 127.0.0.1 - - [12/Aug/2019:23:23:04 +0000] "POST /query HTTP/1.1" 500 0  6445 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:23:15,913] INFO 127.0.0.1 - - [12/Aug/2019:23:23:02 +0000] "POST /query HTTP/1.1" 200 1728  13396 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:23:18,991] INFO 127.0.0.1 - - [12/Aug/2019:23:23:10 +0000] "POST /query HTTP/1.1" 200 1728  8264 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:23:26,680] INFO 127.0.0.1 - - [12/Aug/2019:23:23:16 +0000] "POST /query HTTP/1.1" 200 1728  9900 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:23:37,760] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:23:37,763] INFO 127.0.0.1 - - [12/Aug/2019:23:23:37 +0000] "POST /ksql HTTP/1.1" 200 478  9 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:24:13,066] INFO 127.0.0.1 - - [12/Aug/2019:23:23:44 +0000] "POST /query HTTP/1.1" 200 1728  28270 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:24:22,015] INFO 127.0.0.1 - - [12/Aug/2019:23:23:44 +0000] "POST /query HTTP/1.1" 200 0  37219 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:24:22,016] INFO 127.0.0.1 - - [12/Aug/2019:23:23:56 +0000] "POST /query HTTP/1.1" 200 1728  25763 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:25:07,025] INFO 127.0.0.1 - - [12/Aug/2019:23:24:13 +0000] "POST /query HTTP/1.1" 500 6179  53956 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:25:48,139] INFO 127.0.0.1 - - [12/Aug/2019:23:23:37 +0000] "POST /query HTTP/1.1" 200 0  130355 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:46:37,524] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:46:37,548] INFO 127.0.0.1 - - [12/Aug/2019:23:46:37 +0000] "POST /ksql HTTP/1.1" 200 478  29 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:46:41,346] INFO 127.0.0.1 - - [12/Aug/2019:23:46:37 +0000] "POST /query HTTP/1.1" 200 0  3757 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:46:41,358] INFO 127.0.0.1 - - [12/Aug/2019:23:46:41 +0000] "POST /query HTTP/1.1" 200 1728  56 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:47:31,408] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,431] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:47:31,431] INFO Build logical plan for CREATE TABLE FOO WITH (KAFKA_TOPIC='FOO', PARTITIONS=1, REPLICAS=1) AS SELECT
  PAGEVIEWS.PAGEID "PAGEID",
  COUNT(*) "TOTAL"
FROM PAGEVIEWS PAGEVIEWS
WINDOW TUMBLING ( SIZE 1 HOURS ) 
GROUP BY PAGEVIEWS.PAGEID;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 16:47:31,433] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:47:31,433] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,433] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,433] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,434] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,434] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,434] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,434] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,434] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,434] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,434] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,435] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,435] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,435] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,435] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,435] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,435] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,443] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,443] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,443] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,443] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,443] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,443] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,444] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,444] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,444] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,444] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,444] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,444] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,445] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,445] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,445] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,446] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,449] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,449] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,449] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,449] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,449] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,449] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,449] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,450] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,450] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,450] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,450] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,450] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,450] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,450] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,451] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,451] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,455] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,455] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,456] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,456] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,456] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,456] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,456] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,456] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,456] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,456] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,457] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,457] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,457] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,457] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,457] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,457] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,476] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,480] INFO Creating topic 'FOO' (io.confluent.ksql.services.KafkaTopicClient:100)
[2019-08-12 16:47:31,502] INFO Executing statement: CREATE TABLE FOO WITH (KAFKA_TOPIC='FOO', PARTITIONS=1, REPLICAS=1) AS SELECT
  PAGEVIEWS.PAGEID "PAGEID",
  COUNT(*) "TOTAL"
FROM PAGEVIEWS PAGEVIEWS
WINDOW TUMBLING ( SIZE 1 HOURS ) 
GROUP BY PAGEVIEWS.PAGEID; (io.confluent.ksql.rest.server.computation.CommandRunner:166)
[2019-08-12 16:47:31,504] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:47:31,504] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:47:31,504] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:47:31,504] INFO Build logical plan for CREATE TABLE FOO WITH (KAFKA_TOPIC='FOO', PARTITIONS=1, REPLICAS=1) AS SELECT
  PAGEVIEWS.PAGEID "PAGEID",
  COUNT(*) "TOTAL"
FROM PAGEVIEWS PAGEVIEWS
WINDOW TUMBLING ( SIZE 1 HOURS ) 
GROUP BY PAGEVIEWS.PAGEID;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 16:47:31,505] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:47:31,505] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,505] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,505] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,505] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,505] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,506] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,506] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,506] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,506] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,506] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,506] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,506] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,506] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,506] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,506] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,506] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,511] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,511] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,511] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,511] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,511] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,511] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,511] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,511] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,511] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,511] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,511] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,512] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,512] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,512] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,512] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,512] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,514] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,514] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,514] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,514] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,514] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,514] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,514] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,514] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,515] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,515] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,515] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,515] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,515] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,515] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,515] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,515] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,519] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,519] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,519] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,519] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,520] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,520] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,520] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,520] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,520] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,520] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,520] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,520] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,520] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,520] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,520] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,520] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,561] INFO Starting query with application id: _confluent-ksql-default_query_CTAS_FOO_1 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 16:47:31,563] INFO Executed statement: CREATE TABLE FOO WITH (KAFKA_TOPIC='FOO', PARTITIONS=1, REPLICAS=1) AS SELECT
  PAGEVIEWS.PAGEID "PAGEID",
  COUNT(*) "TOTAL"
FROM PAGEVIEWS PAGEVIEWS
WINDOW TUMBLING ( SIZE 1 HOURS ) 
GROUP BY PAGEVIEWS.PAGEID; (io.confluent.ksql.rest.server.computation.CommandRunner:173)
[2019-08-12 16:47:31,572] INFO 127.0.0.1 - - [12/Aug/2019:23:47:31 +0000] "POST /ksql HTTP/1.1" 200 456  169 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:47:31,685] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,686] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,686] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,686] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,694] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,694] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,694] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,694] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,821] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,822] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,822] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,822] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:31,831] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:31,832] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:31,832] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:31,832] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:32,039] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:32,039] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:32,039] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:32,039] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:33,749] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:33,749] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:33,749] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:33,749] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,137] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,138] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:47:38,138] INFO Build logical plan for select * from foo limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 16:47:38,139] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:47:38,140] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,140] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,140] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,140] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,140] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,141] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,141] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,141] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,141] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,141] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,141] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,141] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,142] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,142] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,142] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,142] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,142] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,142] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,143] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,143] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,143] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,143] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,143] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,143] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,144] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,144] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,144] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,144] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,144] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,144] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,144] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,145] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,165] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:47:38,166] INFO Build logical plan for select * from foo limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 16:47:38,166] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:47:38,167] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,167] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,167] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,167] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,167] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,167] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,167] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,168] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,168] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,168] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,168] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,168] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,168] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,169] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,169] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,169] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,169] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,169] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,169] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,169] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,170] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,170] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,170] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,170] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,170] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,170] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,170] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,171] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,171] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,171] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,171] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,171] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,282] INFO 127.0.0.1 - - [12/Aug/2019:23:47:38 +0000] "POST /ksql HTTP/1.1" 200 1995  150 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:47:38,308] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:47:38,309] INFO Build logical plan for select * from foo limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 16:47:38,310] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 16:47:38,310] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,310] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,311] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,311] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,311] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,311] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,311] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,312] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,312] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,312] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,312] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,313] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,313] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,313] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,313] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,314] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,314] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,314] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,314] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,314] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,315] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,315] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,315] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,315] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,315] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,316] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,316] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,316] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,316] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:38,316] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:38,316] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:38,316] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:38,381] INFO Starting query with application id: _confluent-ksql-default_transient_6758292205376100052_1565653658325 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 16:47:38,386] INFO Streaming query 'select * from foo limit 5;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 16:47:39,948] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:39,949] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:39,949] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:39,949] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:39,961] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:39,962] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:39,962] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:39,962] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:40,499] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 16:47:40,499] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 16:47:40,500] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 16:47:40,500] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:40,606] INFO 127.0.0.1 - - [12/Aug/2019:23:47:38 +0000] "POST /query HTTP/1.1" 200 837  2302 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:47:57,224] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:57,790] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:47:57,792] INFO Executing statement: create materialized view ghjk as select * from foo; (io.confluent.ksql.rest.server.computation.CommandRunner:166)
[2019-08-12 16:47:57,793] INFO Executed statement: create materialized view ghjk as select * from foo; (io.confluent.ksql.rest.server.computation.CommandRunner:173)
[2019-08-12 16:47:57,796] INFO 127.0.0.1 - - [12/Aug/2019:23:47:57 +0000] "POST /ksql HTTP/1.1" 200 262  577 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:48:13,096] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 16:48:13,100] INFO 127.0.0.1 - - [12/Aug/2019:23:48:13 +0000] "POST /ksql HTTP/1.1" 200 478  9 (io.confluent.rest-utils.requests:62)
[2019-08-12 16:48:13,164] INFO 127.0.0.1 - - [12/Aug/2019:23:48:13 +0000] "POST /query HTTP/1.1" 200 8489  32 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:25:30,890] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:25:30,899] INFO 127.0.0.1 - - [13/Aug/2019:03:25:30 +0000] "POST /ksql HTTP/1.1" 200 478  30 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:25:31,008] INFO 127.0.0.1 - - [13/Aug/2019:03:25:30 +0000] "POST /query HTTP/1.1" 200 5148  38 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:26:02,111] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:26:02,116] INFO 127.0.0.1 - - [13/Aug/2019:03:26:02 +0000] "POST /ksql HTTP/1.1" 200 500  13 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:26:02,168] INFO 127.0.0.1 - - [13/Aug/2019:03:26:02 +0000] "POST /query HTTP/1.1" 200 572  24 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:26:41,999] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:26:42,003] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:26:42,003] INFO Build logical plan for select * from pageviews limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:26:42,005] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:26:42,006] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:26:42,007] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:26:42,010] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:26:42,014] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:26:42,015] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:26:42,016] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:26:42,016] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:26:42,017] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:26:42,018] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:26:42,019] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:26:42,019] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:26:42,020] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:26:42,020] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:26:42,020] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:26:42,020] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:26:42,021] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:26:42,062] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:26:42,063] INFO Build logical plan for select * from pageviews limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:26:42,063] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:26:42,064] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:26:42,064] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:26:42,065] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:26:42,065] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:26:42,065] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:26:42,065] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:26:42,066] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:26:42,066] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:26:42,066] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:26:42,066] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:26:42,066] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:26:42,067] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:26:42,067] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:26:42,067] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:26:42,067] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:26:42,068] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:26:42,245] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:26:42,252] INFO Build logical plan for select * from pageviews limit 5;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:26:42,253] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:26:42,253] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:26:42,254] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:26:42,254] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:26:42,254] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:26:42,254] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:26:42,255] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:26:42,255] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:26:42,255] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:26:42,255] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:26:42,255] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:26:42,256] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:26:42,256] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:26:42,256] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:26:42,256] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:26:42,257] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:26:42,257] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:26:42,271] INFO 127.0.0.1 - - [13/Aug/2019:03:26:41 +0000] "POST /ksql HTTP/1.1" 200 1754  279 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:26:42,348] INFO Starting query with application id: _confluent-ksql-default_transient_6561763663435087414_1565666802270 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 20:26:42,352] INFO Streaming query 'select * from pageviews limit 5;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 20:27:25,470] WARN Query terminated due to exception:org.eclipse.jetty.io.EofException (io.confluent.ksql.rest.server.resources.streaming.QueryStreamWriter:87)
[2019-08-12 20:27:54,784] INFO Stopped NetworkTrafficServerConnector@3a1b36a1{HTTP/1.1,[http/1.1]}{0.0.0.0:8088} (org.eclipse.jetty.server.AbstractConnector:341)
[2019-08-12 20:27:54,784] INFO node0 Stopped scavenging (org.eclipse.jetty.server.session:167)
[2019-08-12 20:27:54,794] INFO Stopped o.e.j.s.ServletContextHandler@12fcb2c3{/ws,null,UNAVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:1045)
[2019-08-12 20:27:54,809] INFO Stopped o.e.j.s.ServletContextHandler@57bd6a8f{/,null,UNAVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:1045)
[2019-08-12 20:27:55,813] WARN QueuedThreadPool[qtp254642444]@f2d890c{STOPPING,8<=1<=200,i=0,r=-1,q=1}[NO_TRY] Couldn't stop Thread[qtp254642444-569,5,main] (org.eclipse.jetty.util.thread.QueuedThreadPool:225)
[2019-08-12 20:28:16,667] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:28:16,685] INFO KsqlRestConfig values: 
	access.control.allow.headers = 
	access.control.allow.methods = 
	access.control.allow.origin = 
	authentication.method = NONE
	authentication.realm = 
	authentication.roles = [*]
	authentication.skip.paths = []
	compression.enable = true
	debug = false
	idle.timeout.ms = 30000
	ksql.server.command.response.timeout.ms = 5000
	ksql.server.install.dir = /Users/zlim/desktop/github/ksql
	ksql.server.preconditions = []
	ksql.server.websockets.num.threads = 5
	listeners = [http://0.0.0.0:8088]
	metric.reporters = []
	metrics.jmx.prefix = rest-utils
	metrics.num.samples = 2
	metrics.sample.window.ms = 30000
	metrics.tag.map = []
	port = 8080
	query.stream.disconnect.check = 1000
	request.logger.name = io.confluent.rest-utils.requests
	resource.extension.classes = []
	response.mediatype.default = application/json
	response.mediatype.preferred = [application/json]
	rest.servlet.initializor.classes = []
	shutdown.graceful.ms = 1000
	ssl.cipher.suites = []
	ssl.client.auth = false
	ssl.client.authentication = NONE
	ssl.enabled.protocols = []
	ssl.endpoint.identification.algorithm = null
	ssl.key.password = [hidden]
	ssl.keymanager.algorithm = 
	ssl.keystore.location = 
	ssl.keystore.password = [hidden]
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = 
	ssl.trustmanager.algorithm = 
	ssl.truststore.location = 
	ssl.truststore.password = [hidden]
	ssl.truststore.type = JKS
	websocket.path.prefix = /ws
	websocket.servlet.initializor.classes = []
 (io.confluent.ksql.rest.server.KsqlRestConfig:347)
[2019-08-12 20:28:16,708] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:28:16,716] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:28:16,718] INFO ProcessingLogConfig values: 
	ksql.logging.processing.rows.include = false
	ksql.logging.processing.stream.auto.create = true
	ksql.logging.processing.stream.name = KSQL_PROCESSING_LOG
	ksql.logging.processing.topic.auto.create = true
	ksql.logging.processing.topic.name = 
	ksql.logging.processing.topic.partitions = 1
	ksql.logging.processing.topic.replication.factor = 1
 (io.confluent.ksql.logging.processing.ProcessingLogConfig:347)
[2019-08-12 20:28:16,882] INFO Setting UDF blacklisted classes to:  (io.confluent.ksql.function.Blacklist:70)
[2019-08-12 20:28:17,139] INFO Adding UDF name='ComplexFunction' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:17,537] INFO Adding function ComplexFunction for method public java.lang.Object io.confluent.ksql.function.UdfLoaderTest$ComplexUdf.foo(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:17,791] INFO Adding UDF name='ConfigurableUdf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:17,820] INFO Adding function ConfigurableUdf for method public int io.confluent.ksql.function.UdfLoaderTest$ConfigurableUdf.foo(int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:17,821] INFO Adding UDF name='SomeFunction' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:17,896] INFO Adding function SomeFunction for method public int io.confluent.ksql.function.UdfLoaderTest$SomeFunctionUdf.foo(java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:17,900] WARN Ignoring method annotated with @Udf but missing @UdfDescription. method='something' from path=internal (io.confluent.ksql.function.UdfLoader:209)
[2019-08-12 20:28:17,902] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:17,927] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffIntString(int,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:17,927] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:17,947] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongString(long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:17,948] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:17,964] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongLongString(long,long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:17,965] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:17,978] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongVarargs(long[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:17,979] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,003] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffStruct(org.apache.kafka.connect.data.Struct) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,005] INFO Adding UDF name='datetostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,096] INFO Adding function datetostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.DateToString.dateToString(int,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,098] INFO Adding UDF name='stringtodate' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,114] INFO Adding function stringtodate for method public int io.confluent.ksql.function.udf.datetime.StringToDate.stringToDate(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,116] INFO Adding UDF name='stringtotimestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,130] INFO Adding function stringtotimestamp for method public long io.confluent.ksql.function.udf.datetime.StringToTimestamp.stringToTimestamp(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,132] INFO Adding UDF name='stringtotimestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,149] INFO Adding function stringtotimestamp for method public long io.confluent.ksql.function.udf.datetime.StringToTimestamp.stringToTimestamp(java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,151] INFO Adding UDF name='timestamptostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,173] INFO Adding function timestamptostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.TimestampToString.timestampToString(long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,175] INFO Adding UDF name='timestamptostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,191] INFO Adding function timestamptostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.TimestampToString.timestampToString(long,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,193] INFO Adding UDF name='unix_date' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,197] INFO Adding function unix_date for method public int io.confluent.ksql.function.udf.datetime.UnixDate.unixDate() (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,199] INFO Adding UDF name='unix_timestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,202] INFO Adding function unix_timestamp for method public long io.confluent.ksql.function.udf.datetime.UnixTimestamp.unixTimestamp() (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,204] INFO Adding UDF name='geo_distance' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,219] INFO Adding function geo_distance for method public java.lang.Double io.confluent.ksql.function.udf.geo.GeoDistance.geoDistance(double,double,double,double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,220] INFO Adding UDF name='geo_distance' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,267] INFO Adding function geo_distance for method public java.lang.Double io.confluent.ksql.function.udf.geo.GeoDistance.geoDistance(double,double,double,double,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,280] INFO Adding UDF name='AS_ARRAY' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,292] INFO Adding function AS_ARRAY for method public final java.util.List io.confluent.ksql.function.udf.list.AsArray.asArray(java.lang.Object[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,293] INFO Adding UDF name='slice' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,323] INFO Adding function slice for method public java.util.List io.confluent.ksql.function.udf.list.Slice.slice(java.util.List,java.lang.Integer,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,330] INFO Adding UDF name='AS_MAP' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,344] INFO Adding function AS_MAP for method public final java.util.Map io.confluent.ksql.function.udf.map.AsMap.asMap(java.util.List,java.util.List) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,386] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,410] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,411] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,438] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,438] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,449] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,451] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,464] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,465] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,481] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,482] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,495] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,498] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,513] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,514] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,531] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,532] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,551] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,553] INFO Adding UDF name='elt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,571] INFO Adding function elt for method public java.lang.String io.confluent.ksql.function.udf.string.Elt.elt(int,java.lang.String[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,575] INFO Adding UDF name='field' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,587] INFO Adding function field for method public int io.confluent.ksql.function.udf.string.Field.field(java.lang.String,java.lang.String[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,590] INFO Adding UDF name='mask_keep_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,604] INFO Adding function mask_keep_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepLeftKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,604] INFO Adding UDF name='mask_keep_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,662] INFO Adding function mask_keep_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepLeftKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,669] INFO Adding UDF name='mask_keep_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,686] INFO Adding function mask_keep_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepRightKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,687] INFO Adding UDF name='mask_keep_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,701] INFO Adding function mask_keep_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepRightKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,702] INFO Adding UDF name='mask' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,716] INFO Adding function mask for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKudf.mask(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,717] INFO Adding UDF name='mask' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,733] INFO Adding function mask for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKudf.mask(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,742] INFO Adding UDF name='mask_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,767] INFO Adding function mask_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskLeftKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,768] INFO Adding UDF name='mask_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,785] INFO Adding function mask_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskLeftKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,787] INFO Adding UDF name='mask_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,804] INFO Adding function mask_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskRightKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,805] INFO Adding UDF name='mask_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,818] INFO Adding function mask_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskRightKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,820] INFO Adding UDF name='split' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,846] INFO Adding function split for method public java.util.List io.confluent.ksql.function.udf.string.SplitKudf.split(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,849] INFO Adding UDF name='substring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:18,876] INFO Adding function substring for method public java.lang.String io.confluent.ksql.function.udf.string.Substring.substring(java.lang.String,java.lang.Integer,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:18,877] INFO Adding UDF name='substring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:19,047] INFO Adding function substring for method public java.lang.String io.confluent.ksql.function.udf.string.Substring.substring(java.lang.String,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:19,049] INFO Adding UDF name='url_decode_param' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:19,081] INFO Adding function url_decode_param for method public java.lang.String io.confluent.ksql.function.udf.url.UrlDecodeParamKudf.decodeParam(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:19,082] INFO Adding UDF name='url_encode_param' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:19,099] INFO Adding function url_encode_param for method public java.lang.String io.confluent.ksql.function.udf.url.UrlEncodeParamKudf.encodeParam(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:19,100] INFO Adding UDF name='url_extract_fragment' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:19,116] INFO Adding function url_extract_fragment for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractFragmentKudf.extractFragment(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:19,117] INFO Adding UDF name='url_extract_host' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:19,141] INFO Adding function url_extract_host for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractHostKudf.extractHost(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:19,145] INFO Adding UDF name='url_extract_parameter' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:19,219] INFO Adding function url_extract_parameter for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractParameterKudf.extractParam(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:19,228] INFO Adding UDF name='url_extract_path' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:19,254] INFO Adding function url_extract_path for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractPathKudf.extractPath(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:19,257] INFO Adding UDF name='url_extract_port' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:19,273] INFO Adding function url_extract_port for method public java.lang.Integer io.confluent.ksql.function.udf.url.UrlExtractPortKudf.extractPort(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:19,290] INFO Adding UDF name='url_extract_protocol' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:19,310] INFO Adding function url_extract_protocol for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractProtocolKudf.extractProtocol(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:19,315] INFO Adding UDF name='url_extract_query' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:19,327] INFO Adding function url_extract_query for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractQueryKudf.extractQuery(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:19,334] INFO Adding UDF name='E2EConfigurableUdf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:28:19,382] INFO Adding function E2EConfigurableUdf for method public long io.confluent.ksql.integration.EndToEndIntegrationTest$ConfigurableUdf.foo(long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:28:19,392] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:28:19,530] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:28:19,581] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:28:19,613] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:28:19,676] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:28:19,713] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:28:19,750] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:28:19,797] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:28:19,823] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:28:19,844] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:28:19,862] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:28:19,902] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:28:19,954] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:28:20,014] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:28:20,068] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:28:20,103] INFO Adding UDAF name=histogram from path=internal class=class io.confluent.ksql.function.udaf.map.HistogramUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:28:20,133] INFO Adding UDAF name=WindowEnd from path=internal class=class io.confluent.ksql.function.udaf.window.WindowEndKudaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:28:20,151] INFO Adding UDAF name=WindowStart from path=internal class=class io.confluent.ksql.function.udaf.window.WindowStartKudaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:28:20,224] INFO KafkaJsonDeserializerConfig values: 
	json.fail.unknown.properties = true
	json.key.type = class io.confluent.ksql.rest.server.computation.CommandId
	json.value.type = class java.lang.Object
 (io.confluent.kafka.serializers.KafkaJsonDeserializerConfig:347)
[2019-08-12 20:28:20,649] INFO KafkaJsonDeserializerConfig values: 
	json.fail.unknown.properties = true
	json.key.type = class java.lang.Object
	json.value.type = class io.confluent.ksql.rest.server.computation.Command
 (io.confluent.kafka.serializers.KafkaJsonDeserializerConfig:347)
[2019-08-12 20:28:20,713] INFO KafkaJsonSerializerConfig values: 
	json.indent.output = false
 (io.confluent.kafka.serializers.KafkaJsonSerializerConfig:347)
[2019-08-12 20:28:20,714] INFO KafkaJsonSerializerConfig values: 
	json.indent.output = false
 (io.confluent.kafka.serializers.KafkaJsonSerializerConfig:347)
[2019-08-12 20:30:21,109] ERROR Failed to start KSQL (io.confluent.ksql.rest.server.KsqlServerMain:62)
io.confluent.ksql.util.KsqlServerException: Could not get Kafka cluster configuration!
	at io.confluent.ksql.services.KafkaClusterUtil.getConfig(KafkaClusterUtil.java:76)
	at io.confluent.ksql.engine.TopicAccessValidatorFactory.isKafkaAuthorizerEnabled(TopicAccessValidatorFactory.java:66)
	at io.confluent.ksql.engine.TopicAccessValidatorFactory.create(TopicAccessValidatorFactory.java:50)
	at io.confluent.ksql.rest.server.KsqlRestApplication.buildApplication(KsqlRestApplication.java:462)
	at io.confluent.ksql.rest.server.KsqlRestApplication.buildApplication(KsqlRestApplication.java:401)
	at io.confluent.ksql.rest.server.KsqlServerMain.createExecutable(KsqlServerMain.java:94)
	at io.confluent.ksql.rest.server.KsqlServerMain.main(KsqlServerMain.java:59)
Caused by: java.util.concurrent.ExecutionException: org.apache.kafka.common.errors.TimeoutException: Timed out waiting to send the call.
	at org.apache.kafka.common.internals.KafkaFutureImpl.wrapAndThrow(KafkaFutureImpl.java:45)
	at org.apache.kafka.common.internals.KafkaFutureImpl.access$000(KafkaFutureImpl.java:32)
	at org.apache.kafka.common.internals.KafkaFutureImpl$SingleWaiter.await(KafkaFutureImpl.java:89)
	at org.apache.kafka.common.internals.KafkaFutureImpl.get(KafkaFutureImpl.java:260)
	at io.confluent.ksql.services.KafkaClusterUtil.getConfig(KafkaClusterUtil.java:54)
	... 6 more
Caused by: org.apache.kafka.common.errors.TimeoutException: Timed out waiting to send the call.
[2019-08-12 20:33:25,453] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:25,478] INFO KsqlRestConfig values: 
	access.control.allow.headers = 
	access.control.allow.methods = 
	access.control.allow.origin = 
	authentication.method = NONE
	authentication.realm = 
	authentication.roles = [*]
	authentication.skip.paths = []
	compression.enable = true
	debug = false
	idle.timeout.ms = 30000
	ksql.server.command.response.timeout.ms = 5000
	ksql.server.install.dir = /Users/zlim/desktop/github/ksql
	ksql.server.preconditions = []
	ksql.server.websockets.num.threads = 5
	listeners = [http://0.0.0.0:8088]
	metric.reporters = []
	metrics.jmx.prefix = rest-utils
	metrics.num.samples = 2
	metrics.sample.window.ms = 30000
	metrics.tag.map = []
	port = 8080
	query.stream.disconnect.check = 1000
	request.logger.name = io.confluent.rest-utils.requests
	resource.extension.classes = []
	response.mediatype.default = application/json
	response.mediatype.preferred = [application/json]
	rest.servlet.initializor.classes = []
	shutdown.graceful.ms = 1000
	ssl.cipher.suites = []
	ssl.client.auth = false
	ssl.client.authentication = NONE
	ssl.enabled.protocols = []
	ssl.endpoint.identification.algorithm = null
	ssl.key.password = [hidden]
	ssl.keymanager.algorithm = 
	ssl.keystore.location = 
	ssl.keystore.password = [hidden]
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = 
	ssl.trustmanager.algorithm = 
	ssl.truststore.location = 
	ssl.truststore.password = [hidden]
	ssl.truststore.type = JKS
	websocket.path.prefix = /ws
	websocket.servlet.initializor.classes = []
 (io.confluent.ksql.rest.server.KsqlRestConfig:347)
[2019-08-12 20:33:25,523] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:25,536] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:25,538] INFO ProcessingLogConfig values: 
	ksql.logging.processing.rows.include = false
	ksql.logging.processing.stream.auto.create = true
	ksql.logging.processing.stream.name = KSQL_PROCESSING_LOG
	ksql.logging.processing.topic.auto.create = true
	ksql.logging.processing.topic.name = 
	ksql.logging.processing.topic.partitions = 1
	ksql.logging.processing.topic.replication.factor = 1
 (io.confluent.ksql.logging.processing.ProcessingLogConfig:347)
[2019-08-12 20:33:25,821] INFO Setting UDF blacklisted classes to:  (io.confluent.ksql.function.Blacklist:70)
[2019-08-12 20:33:26,229] INFO Adding UDF name='ComplexFunction' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:26,516] INFO Adding function ComplexFunction for method public java.lang.Object io.confluent.ksql.function.UdfLoaderTest$ComplexUdf.foo(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:26,863] INFO Adding UDF name='ConfigurableUdf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:26,926] INFO Adding function ConfigurableUdf for method public int io.confluent.ksql.function.UdfLoaderTest$ConfigurableUdf.foo(int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:26,927] INFO Adding UDF name='SomeFunction' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:26,952] INFO Adding function SomeFunction for method public int io.confluent.ksql.function.UdfLoaderTest$SomeFunctionUdf.foo(java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:26,956] WARN Ignoring method annotated with @Udf but missing @UdfDescription. method='something' from path=internal (io.confluent.ksql.function.UdfLoader:209)
[2019-08-12 20:33:26,958] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:26,980] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffIntString(int,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:26,981] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:26,993] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongString(long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:26,993] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,007] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongLongString(long,long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,007] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,021] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongVarargs(long[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,022] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,030] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffStruct(org.apache.kafka.connect.data.Struct) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,032] INFO Adding UDF name='datetostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,088] INFO Adding function datetostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.DateToString.dateToString(int,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,089] INFO Adding UDF name='stringtodate' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,102] INFO Adding function stringtodate for method public int io.confluent.ksql.function.udf.datetime.StringToDate.stringToDate(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,104] INFO Adding UDF name='stringtotimestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,118] INFO Adding function stringtotimestamp for method public long io.confluent.ksql.function.udf.datetime.StringToTimestamp.stringToTimestamp(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,119] INFO Adding UDF name='stringtotimestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,129] INFO Adding function stringtotimestamp for method public long io.confluent.ksql.function.udf.datetime.StringToTimestamp.stringToTimestamp(java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,131] INFO Adding UDF name='timestamptostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,142] INFO Adding function timestamptostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.TimestampToString.timestampToString(long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,143] INFO Adding UDF name='timestamptostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,158] INFO Adding function timestamptostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.TimestampToString.timestampToString(long,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,163] INFO Adding UDF name='unix_date' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,166] INFO Adding function unix_date for method public int io.confluent.ksql.function.udf.datetime.UnixDate.unixDate() (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,167] INFO Adding UDF name='unix_timestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,170] INFO Adding function unix_timestamp for method public long io.confluent.ksql.function.udf.datetime.UnixTimestamp.unixTimestamp() (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,172] INFO Adding UDF name='geo_distance' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,188] INFO Adding function geo_distance for method public java.lang.Double io.confluent.ksql.function.udf.geo.GeoDistance.geoDistance(double,double,double,double,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,189] INFO Adding UDF name='geo_distance' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,203] INFO Adding function geo_distance for method public java.lang.Double io.confluent.ksql.function.udf.geo.GeoDistance.geoDistance(double,double,double,double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,207] INFO Adding UDF name='AS_ARRAY' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,218] INFO Adding function AS_ARRAY for method public final java.util.List io.confluent.ksql.function.udf.list.AsArray.asArray(java.lang.Object[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,222] INFO Adding UDF name='slice' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,247] INFO Adding function slice for method public java.util.List io.confluent.ksql.function.udf.list.Slice.slice(java.util.List,java.lang.Integer,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,249] INFO Adding UDF name='AS_MAP' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,298] INFO Adding function AS_MAP for method public final java.util.Map io.confluent.ksql.function.udf.map.AsMap.asMap(java.util.List,java.util.List) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,307] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,325] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,325] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,347] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,348] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,358] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,359] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,370] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,370] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,380] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,386] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,399] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,400] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,416] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,417] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,426] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,426] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,440] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,441] INFO Adding UDF name='elt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,454] INFO Adding function elt for method public java.lang.String io.confluent.ksql.function.udf.string.Elt.elt(int,java.lang.String[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,455] INFO Adding UDF name='field' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,468] INFO Adding function field for method public int io.confluent.ksql.function.udf.string.Field.field(java.lang.String,java.lang.String[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,470] INFO Adding UDF name='mask_keep_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,487] INFO Adding function mask_keep_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepLeftKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,487] INFO Adding UDF name='mask_keep_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,497] INFO Adding function mask_keep_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepLeftKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,522] INFO Adding UDF name='mask_keep_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,538] INFO Adding function mask_keep_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepRightKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,538] INFO Adding UDF name='mask_keep_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,551] INFO Adding function mask_keep_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepRightKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,554] INFO Adding UDF name='mask' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,567] INFO Adding function mask for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKudf.mask(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,568] INFO Adding UDF name='mask' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,578] INFO Adding function mask for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKudf.mask(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,579] INFO Adding UDF name='mask_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,592] INFO Adding function mask_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskLeftKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,593] INFO Adding UDF name='mask_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,605] INFO Adding function mask_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskLeftKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,606] INFO Adding UDF name='mask_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,617] INFO Adding function mask_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskRightKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,618] INFO Adding UDF name='mask_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,629] INFO Adding function mask_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskRightKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,630] INFO Adding UDF name='split' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,642] INFO Adding function split for method public java.util.List io.confluent.ksql.function.udf.string.SplitKudf.split(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,645] INFO Adding UDF name='substring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,655] INFO Adding function substring for method public java.lang.String io.confluent.ksql.function.udf.string.Substring.substring(java.lang.String,java.lang.Integer,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,656] INFO Adding UDF name='substring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,667] INFO Adding function substring for method public java.lang.String io.confluent.ksql.function.udf.string.Substring.substring(java.lang.String,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,668] INFO Adding UDF name='url_decode_param' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,679] INFO Adding function url_decode_param for method public java.lang.String io.confluent.ksql.function.udf.url.UrlDecodeParamKudf.decodeParam(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,680] INFO Adding UDF name='url_encode_param' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,690] INFO Adding function url_encode_param for method public java.lang.String io.confluent.ksql.function.udf.url.UrlEncodeParamKudf.encodeParam(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,691] INFO Adding UDF name='url_extract_fragment' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,701] INFO Adding function url_extract_fragment for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractFragmentKudf.extractFragment(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,702] INFO Adding UDF name='url_extract_host' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,712] INFO Adding function url_extract_host for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractHostKudf.extractHost(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,713] INFO Adding UDF name='url_extract_parameter' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,745] INFO Adding function url_extract_parameter for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractParameterKudf.extractParam(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,747] INFO Adding UDF name='url_extract_path' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,757] INFO Adding function url_extract_path for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractPathKudf.extractPath(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,758] INFO Adding UDF name='url_extract_port' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,771] INFO Adding function url_extract_port for method public java.lang.Integer io.confluent.ksql.function.udf.url.UrlExtractPortKudf.extractPort(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,773] INFO Adding UDF name='url_extract_protocol' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,787] INFO Adding function url_extract_protocol for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractProtocolKudf.extractProtocol(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,788] INFO Adding UDF name='url_extract_query' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,797] INFO Adding function url_extract_query for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractQueryKudf.extractQuery(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,798] INFO Adding UDF name='E2EConfigurableUdf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:33:27,813] INFO Adding function E2EConfigurableUdf for method public long io.confluent.ksql.integration.EndToEndIntegrationTest$ConfigurableUdf.foo(long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:33:27,822] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:33:27,870] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:33:27,889] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:33:27,907] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:33:27,923] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:33:27,943] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:33:27,960] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:33:27,982] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:33:27,996] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:33:28,011] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:33:28,029] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:33:28,051] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:33:28,067] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:33:28,080] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:33:28,094] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:33:28,110] INFO Adding UDAF name=histogram from path=internal class=class io.confluent.ksql.function.udaf.map.HistogramUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:33:28,125] INFO Adding UDAF name=WindowEnd from path=internal class=class io.confluent.ksql.function.udaf.window.WindowEndKudaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:33:28,139] INFO Adding UDAF name=WindowStart from path=internal class=class io.confluent.ksql.function.udaf.window.WindowStartKudaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:33:28,189] INFO KafkaJsonDeserializerConfig values: 
	json.fail.unknown.properties = true
	json.key.type = class io.confluent.ksql.rest.server.computation.CommandId
	json.value.type = class java.lang.Object
 (io.confluent.kafka.serializers.KafkaJsonDeserializerConfig:347)
[2019-08-12 20:33:28,655] INFO KafkaJsonDeserializerConfig values: 
	json.fail.unknown.properties = true
	json.key.type = class java.lang.Object
	json.value.type = class io.confluent.ksql.rest.server.computation.Command
 (io.confluent.kafka.serializers.KafkaJsonDeserializerConfig:347)
[2019-08-12 20:33:28,745] INFO KafkaJsonSerializerConfig values: 
	json.indent.output = false
 (io.confluent.kafka.serializers.KafkaJsonSerializerConfig:347)
[2019-08-12 20:33:28,745] INFO KafkaJsonSerializerConfig values: 
	json.indent.output = false
 (io.confluent.kafka.serializers.KafkaJsonSerializerConfig:347)
[2019-08-12 20:33:30,141] INFO DataStax Java driver for Apache Cassandra(R) (com.datastax.oss:java-driver-core) version 4.1.0 (com.datastax.oss.driver.internal.core.DefaultMavenCoordinates:37)
[2019-08-12 20:33:31,424] INFO Using native clock for microsecond precision (com.datastax.oss.driver.internal.core.time.Clock:40)
[2019-08-12 20:33:33,167] INFO Logging initialized @9506ms to org.eclipse.jetty.util.log.Slf4jLog (org.eclipse.jetty.util.log:193)
[2019-08-12 20:33:33,175] INFO Starting server (io.confluent.ksql.rest.server.KsqlServerMain:73)
[2019-08-12 20:33:33,628] INFO Adding listener: http://0.0.0.0:8088 (io.confluent.rest.Application:241)
[2019-08-12 20:33:34,031] INFO jetty-9.4.18.v20190429; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_211-b12 (org.eclipse.jetty.server.Server:370)
[2019-08-12 20:33:34,101] INFO DefaultSessionIdManager workerName=node0 (org.eclipse.jetty.server.session:365)
[2019-08-12 20:33:34,101] INFO No SessionScavenger set, using defaults (org.eclipse.jetty.server.session:370)
[2019-08-12 20:33:34,105] INFO node0 Scavenging every 660000ms (org.eclipse.jetty.server.session:149)
[2019-08-12 20:33:34,970] INFO HV000001: Hibernate Validator 5.1.3.Final (org.hibernate.validator.internal.util.Version:27)
[2019-08-12 20:33:35,207] INFO Started o.e.j.s.ServletContextHandler@7ca492d9{/,null,AVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:855)
[2019-08-12 20:33:35,277] INFO Started o.e.j.s.ServletContextHandler@7742a45c{/ws,null,AVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:855)
[2019-08-12 20:33:35,311] INFO Started NetworkTrafficServerConnector@415795f3{HTTP/1.1,[http/1.1]}{0.0.0.0:8088} (org.eclipse.jetty.server.AbstractConnector:292)
[2019-08-12 20:33:35,311] INFO Started @11650ms (org.eclipse.jetty.server.Server:410)
[2019-08-12 20:33:35,314] WARN Creating topic _confluent-ksql-default__command_topic with replication factor of 1 which is less than 2. This is not advisable in a production environment.  (io.confluent.ksql.rest.util.KsqlInternalTopicUtils:75)
[2019-08-12 20:33:35,416] INFO Corrected retention.ms on ksql internal topic. topic:_confluent-ksql-default__command_topic, retention.ms:9223372036854775807 (io.confluent.ksql.rest.util.KsqlInternalTopicUtils:99)
[2019-08-12 20:33:35,488] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:35,488] INFO Build logical plan for CREATE STREAM KSQL_COMMANDS (STATEMENT STRING) WITH(VALUE_FORMAT='JSON', KAFKA_TOPIC='_confluent-ksql-default__command_topic');. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:33:35,490] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:35,517] INFO ProcessingLogConfig values: 
	ksql.logging.processing.rows.include = false
	ksql.logging.processing.stream.auto.create = false
	ksql.logging.processing.stream.name = KSQL_PROCESSING_LOG
	ksql.logging.processing.topic.auto.create = false
	ksql.logging.processing.topic.name = 
	ksql.logging.processing.topic.partitions = 1
	ksql.logging.processing.topic.replication.factor = 1
 (io.confluent.ksql.logging.processing.ProcessingLogConfig:347)
[2019-08-12 20:33:40,848] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:40,853] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:40,853] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:40,854] INFO Build logical plan for CREATE STREAM KSQL_PROCESSING_LOG (LOGGER STRING, LEVEL STRING, `TIME` BIGINT, MESSAGE STRUCT<`type` INTEGER, deserializationError STRUCT<errorMessage STRING, recordB64 STRING, cause ARRAY<STRING>>, recordProcessingError STRUCT<errorMessage STRING, record STRING, cause ARRAY<STRING>>, productionError STRUCT<errorMessage STRING>>) WITH (VALUE_FORMAT='JSON', KAFKA_TOPIC='default_ksql_processing_log');. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:33:40,854] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:40,860] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:40,860] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:40,861] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:40,861] INFO Build logical plan for CREATE STREAM PAGEVIEWS (viewtime BIGINT, userid VARCHAR, pageid VARCHAR) WITH (kafka_topic='pageviews', value_format='AVRO');. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:33:40,862] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:40,887] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:40,896] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:40,915] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,217] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:41,219] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:41,219] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:41,219] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,219] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:41,222] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:41,222] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:41,222] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,222] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:41,222] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:41,222] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:41,223] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,223] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:41,257] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:41,258] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:41,259] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:41,259] INFO Build logical plan for CREATE TABLE USER_VIEWS_PER_HOUR WITH (KAFKA_TOPIC='USER_VIEWS_PER_HOUR', PARTITIONS=1, REPLICAS=1) AS SELECT
  PAGEVIEWS.USERID "USERID",
  COUNT(*) "TOTAL"
FROM PAGEVIEWS PAGEVIEWS
WINDOW TUMBLING ( SIZE 1 HOURS ) 
GROUP BY PAGEVIEWS.USERID;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:33:41,394] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:41,410] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:41,410] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:41,410] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,411] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:41,411] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:41,411] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:41,411] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,411] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:41,411] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:41,412] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:41,412] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,412] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:41,412] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:41,412] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:41,412] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,412] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:41,473] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:41,473] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:41,473] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,474] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:41,474] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:41,474] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:41,475] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,475] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:41,475] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:41,475] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:41,475] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,476] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:41,476] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:41,476] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:41,476] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,476] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:41,497] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:41,499] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:41,502] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,502] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:41,503] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:41,503] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:41,503] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,503] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:41,504] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:41,504] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:41,504] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,504] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:41,505] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:41,505] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:41,505] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,505] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:41,557] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:41,558] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:41,558] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,558] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:41,558] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:41,558] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:41,558] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,558] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:41,559] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:41,559] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:41,559] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,559] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:41,560] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:41,560] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:41,560] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:41,560] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,138] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:42,139] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:42,140] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:42,140] INFO Build logical plan for CREATE TABLE FOO WITH (KAFKA_TOPIC='FOO', PARTITIONS=1, REPLICAS=1) AS SELECT
  PAGEVIEWS.PAGEID "PAGEID",
  COUNT(*) "TOTAL"
FROM PAGEVIEWS PAGEVIEWS
WINDOW TUMBLING ( SIZE 1 HOURS ) 
GROUP BY PAGEVIEWS.PAGEID;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:33:42,142] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:33:42,142] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,142] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,143] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,143] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,143] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,143] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,143] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,143] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,144] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,144] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,144] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,144] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,145] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,145] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,145] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,145] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,159] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,160] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,160] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,160] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,160] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,160] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,161] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,161] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,161] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,161] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,161] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,162] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,162] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,162] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,162] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,163] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,172] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,173] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,173] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,173] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,174] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,174] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,174] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,174] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,175] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,175] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,175] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,175] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,176] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,176] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,176] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,176] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,189] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,190] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,190] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,190] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,190] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,190] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,190] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,191] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,191] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,192] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,192] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,192] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,193] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,193] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,193] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,193] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,380] INFO Starting query with application id: _confluent-ksql-default_query_CTAS_FOO_1 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 20:33:42,426] INFO Starting query with application id: _confluent-ksql-default_query_CTAS_USER_VIEWS_PER_HOUR_0 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 20:33:42,532] WARN Writing to metrics Kafka topic will be disabled (io.confluent.support.metrics.PhoneHomeConfig:61)
[2019-08-12 20:33:42,541] INFO No customer ID configured -- falling back to id 'anonymous' (io.confluent.support.metrics.BaseSupportConfig:336)
[2019-08-12 20:33:42,542] WARN Enforcing customer ID 'anonymous' (io.confluent.support.metrics.PhoneHomeConfig:66)
[2019-08-12 20:33:42,560] WARN Please note that the version check feature of KSQL is enabled.  With this enabled, this instance is configured to collect and report anonymously the version information to Confluent, Inc. ("Confluent") or its parent, subsidiaries, affiliates or service providers every 24hours.  This Metadata may be transferred to any country in which Confluent maintains facilities.  For a more in depth discussion of how Confluent processes such information, please read our Privacy Policy located at http://www.confluent.io/privacy. By proceeding with `confluent.support.metrics.enable=true`, you agree to all such collection, transfer and use of Version information by Confluent. You can turn the version check  feature off by setting `confluent.support.metrics.enable=false` in the KSQL configuration and restarting the KSQL.  See the Confluent Platform documentation for further information. (io.confluent.ksql.version.metrics.KsqlVersionCheckerAgent:90)
[2019-08-12 20:33:42,561] INFO Waiting until monitored service is ready for metrics collection (io.confluent.support.metrics.BaseMetricsReporter:189)
[2019-08-12 20:33:42,561] INFO Monitored service is now ready (io.confluent.support.metrics.BaseMetricsReporter:200)
[2019-08-12 20:33:42,561] INFO Attempting to collect and submit metrics (io.confluent.support.metrics.BaseMetricsReporter:160)
[2019-08-12 20:33:42,573] INFO Server up and running (io.confluent.ksql.rest.server.KsqlServerMain:75)
[2019-08-12 20:33:42,774] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,774] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,775] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,775] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,801] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,802] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,802] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,802] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,938] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,938] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,939] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,939] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:42,945] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:42,945] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:42,945] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:42,946] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:43,247] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:43,247] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:43,247] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:43,247] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:43,270] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:43,271] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:43,271] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:43,271] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:43,283] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:43,290] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:43,291] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:43,291] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:43,292] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:43,292] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:43,292] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:43,295] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:43,312] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:43,312] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:43,313] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:43,313] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:43,334] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:43,334] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:43,335] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:43,335] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:44,118] INFO Successfully submitted metrics to Confluent via secure endpoint (io.confluent.support.metrics.submitters.ConfluentSubmitter:143)
[2019-08-12 20:33:44,544] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:44,547] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:44,547] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:44,548] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:33:44,619] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:33:44,619] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:33:44,620] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:33:44,620] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:02,298] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:02,419] INFO 127.0.0.1 - - [13/Aug/2019:03:34:02 +0000] "POST /ksql HTTP/1.1" 200 287  383 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:34:10,305] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:10,309] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:34:10,310] INFO Build logical plan for select * from pageviews limit 3;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:34:10,312] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:34:10,313] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:10,314] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:10,314] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:10,314] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:10,315] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:10,315] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:10,315] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:10,315] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:10,316] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:10,316] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:10,316] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:10,316] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:10,317] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:10,317] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:10,317] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:10,317] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:10,386] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:34:10,387] INFO Build logical plan for select * from pageviews limit 3;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:34:10,388] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:34:10,389] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:10,389] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:10,389] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:10,389] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:10,390] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:10,390] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:10,390] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:10,390] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:10,391] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:10,391] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:10,391] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:10,392] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:10,392] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:10,392] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:10,393] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:10,393] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:10,528] INFO 127.0.0.1 - - [13/Aug/2019:03:34:10 +0000] "POST /ksql HTTP/1.1" 200 1756  251 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:34:10,642] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:34:10,643] INFO Build logical plan for select * from pageviews limit 3;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:34:10,644] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:34:10,645] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:10,645] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:10,645] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:10,645] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:10,646] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:10,646] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:10,646] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:10,646] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:10,647] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:10,647] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:10,647] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:10,647] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:10,648] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:10,648] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:10,648] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:10,648] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:10,748] INFO Starting query with application id: _confluent-ksql-default_transient_8710274809459320985_1565667250664 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 20:34:10,758] INFO Streaming query 'select * from pageviews limit 3;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 20:34:10,864] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:10,864] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:10,865] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:10,865] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:21,208] INFO 127.0.0.1 - - [13/Aug/2019:03:34:10 +0000] "POST /query HTTP/1.1" 200 458  10576 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:34:21,992] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:22,001] INFO 127.0.0.1 - - [13/Aug/2019:03:34:21 +0000] "POST /ksql HTTP/1.1" 200 486  16 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:34:22,109] INFO 127.0.0.1 - - [13/Aug/2019:03:34:22 +0000] "POST /query HTTP/1.1" 200 287  72 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:34:28,078] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:28,081] INFO 127.0.0.1 - - [13/Aug/2019:03:34:28 +0000] "POST /ksql HTTP/1.1" 200 478  14 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:34:28,145] INFO 127.0.0.1 - - [13/Aug/2019:03:34:28 +0000] "POST /query HTTP/1.1" 200 6003  34 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:34:41,882] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:41,884] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:34:41,884] INFO Build logical plan for select * from pageviews limit 3;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:34:41,885] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:34:41,886] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:41,886] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:41,886] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:41,886] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:41,887] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:41,887] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:41,887] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:41,887] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:41,887] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:41,887] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:41,888] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:41,888] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:41,888] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:41,888] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:41,888] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:41,889] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:41,928] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:34:41,928] INFO Build logical plan for select * from pageviews limit 3;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:34:41,928] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:34:41,929] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:41,929] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:41,929] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:41,929] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:41,930] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:41,930] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:41,930] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:41,930] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:41,930] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:41,930] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:41,931] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:41,931] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:41,931] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:41,932] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:41,932] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:41,932] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:42,039] INFO 127.0.0.1 - - [13/Aug/2019:03:34:41 +0000] "POST /ksql HTTP/1.1" 200 1756  191 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:34:42,074] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:34:42,076] INFO Build logical plan for select * from pageviews limit 3;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:34:42,081] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:34:42,081] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:42,082] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:42,082] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:42,082] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:42,083] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:42,083] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:42,083] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:42,083] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:42,084] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:42,084] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:42,084] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:42,084] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:42,085] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:42,085] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:42,085] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:42,085] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:42,174] INFO Starting query with application id: _confluent-ksql-default_transient_5869016059814023337_1565667282102 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 20:34:42,180] INFO Streaming query 'select * from pageviews limit 3;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 20:34:42,313] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:34:42,313] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:34:42,313] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:34:42,313] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:42,543] INFO 127.0.0.1 - - [13/Aug/2019:03:34:42 +0000] "POST /query HTTP/1.1" 200 458  475 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:34:58,206] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:34:58,213] INFO 127.0.0.1 - - [13/Aug/2019:03:34:58 +0000] "POST /ksql HTTP/1.1" 200 264  15 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:35:09,857] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:09,858] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:35:09,859] INFO Build logical plan for select * from user_views_per_hour limit 3;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:35:09,859] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:35:09,860] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:09,860] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:09,861] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:09,861] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:09,861] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:09,861] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:09,861] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:09,861] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:09,862] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:09,862] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:09,862] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:09,862] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:09,863] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:09,863] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:09,863] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:09,863] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:09,864] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:09,865] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:09,865] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:09,865] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:09,865] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:09,865] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:09,865] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:09,866] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:09,866] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:09,866] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:09,867] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:09,867] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:09,867] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:09,867] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:09,868] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:09,868] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:09,913] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:35:09,914] INFO Build logical plan for select * from user_views_per_hour limit 3;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:35:09,916] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:35:09,916] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:09,917] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:09,917] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:09,917] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:09,918] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:09,918] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:09,919] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:09,919] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:09,919] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:09,919] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:09,920] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:09,920] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:09,921] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:09,921] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:09,922] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:09,922] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:09,922] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:09,923] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:09,923] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:09,923] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:09,924] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:09,924] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:09,924] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:09,925] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:09,925] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:09,926] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:09,926] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:09,927] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:09,927] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:09,927] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:09,928] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:09,928] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:10,014] INFO 127.0.0.1 - - [13/Aug/2019:03:35:09 +0000] "POST /ksql HTTP/1.1" 200 2139  165 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:35:10,044] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:35:10,045] INFO Build logical plan for select * from user_views_per_hour limit 3;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:35:10,046] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:35:10,047] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:10,047] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:10,047] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:10,047] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:10,048] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:10,048] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:10,048] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:10,048] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:10,048] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:10,049] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:10,049] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:10,049] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:10,049] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:10,050] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:10,050] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:10,050] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:10,050] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:10,051] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:10,051] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:10,051] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:10,051] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:10,051] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:10,052] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:10,052] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:10,052] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:10,052] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:10,053] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:10,053] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:10,053] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:10,053] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:10,054] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:10,054] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:10,128] INFO Starting query with application id: _confluent-ksql-default_transient_7886241020313932134_1565667310065 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 20:35:10,129] INFO Streaming query 'select * from user_views_per_hour limit 3;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 20:35:11,026] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:11,028] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:11,028] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:11,029] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:11,058] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:11,058] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:11,058] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:11,058] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:12,333] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:35:12,333] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:35:12,334] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:35:12,334] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:35:12,467] INFO 127.0.0.1 - - [13/Aug/2019:03:35:10 +0000] "POST /query HTTP/1.1" 200 535  2428 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:35:41,272] INFO Stopped NetworkTrafficServerConnector@415795f3{HTTP/1.1,[http/1.1]}{0.0.0.0:8088} (org.eclipse.jetty.server.AbstractConnector:341)
[2019-08-12 20:35:41,273] INFO node0 Stopped scavenging (org.eclipse.jetty.server.session:167)
[2019-08-12 20:35:41,275] INFO Stopped o.e.j.s.ServletContextHandler@7742a45c{/ws,null,UNAVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:1045)
[2019-08-12 20:35:41,286] INFO Stopped o.e.j.s.ServletContextHandler@7ca492d9{/,null,UNAVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:1045)
[2019-08-12 20:35:41,287] INFO Server shutting down (io.confluent.ksql.rest.server.KsqlServerMain:78)
[2019-08-12 20:35:49,649] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:35:49,673] INFO KsqlRestConfig values: 
	access.control.allow.headers = 
	access.control.allow.methods = 
	access.control.allow.origin = 
	authentication.method = NONE
	authentication.realm = 
	authentication.roles = [*]
	authentication.skip.paths = []
	compression.enable = true
	debug = false
	idle.timeout.ms = 30000
	ksql.server.command.response.timeout.ms = 5000
	ksql.server.install.dir = /Users/zlim/desktop/github/ksql
	ksql.server.preconditions = []
	ksql.server.websockets.num.threads = 5
	listeners = [http://0.0.0.0:8088]
	metric.reporters = []
	metrics.jmx.prefix = rest-utils
	metrics.num.samples = 2
	metrics.sample.window.ms = 30000
	metrics.tag.map = []
	port = 8080
	query.stream.disconnect.check = 1000
	request.logger.name = io.confluent.rest-utils.requests
	resource.extension.classes = []
	response.mediatype.default = application/json
	response.mediatype.preferred = [application/json]
	rest.servlet.initializor.classes = []
	shutdown.graceful.ms = 1000
	ssl.cipher.suites = []
	ssl.client.auth = false
	ssl.client.authentication = NONE
	ssl.enabled.protocols = []
	ssl.endpoint.identification.algorithm = null
	ssl.key.password = [hidden]
	ssl.keymanager.algorithm = 
	ssl.keystore.location = 
	ssl.keystore.password = [hidden]
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = 
	ssl.trustmanager.algorithm = 
	ssl.truststore.location = 
	ssl.truststore.password = [hidden]
	ssl.truststore.type = JKS
	websocket.path.prefix = /ws
	websocket.servlet.initializor.classes = []
 (io.confluent.ksql.rest.server.KsqlRestConfig:347)
[2019-08-12 20:35:49,712] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:35:49,722] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:35:49,724] INFO ProcessingLogConfig values: 
	ksql.logging.processing.rows.include = false
	ksql.logging.processing.stream.auto.create = true
	ksql.logging.processing.stream.name = KSQL_PROCESSING_LOG
	ksql.logging.processing.topic.auto.create = true
	ksql.logging.processing.topic.name = 
	ksql.logging.processing.topic.partitions = 1
	ksql.logging.processing.topic.replication.factor = 1
 (io.confluent.ksql.logging.processing.ProcessingLogConfig:347)
[2019-08-12 20:35:49,879] INFO Setting UDF blacklisted classes to:  (io.confluent.ksql.function.Blacklist:70)
[2019-08-12 20:35:50,138] INFO Adding UDF name='ComplexFunction' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:50,512] INFO Adding function ComplexFunction for method public java.lang.Object io.confluent.ksql.function.UdfLoaderTest$ComplexUdf.foo(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:50,737] INFO Adding UDF name='ConfigurableUdf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:50,749] INFO Adding function ConfigurableUdf for method public int io.confluent.ksql.function.UdfLoaderTest$ConfigurableUdf.foo(int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:50,750] INFO Adding UDF name='SomeFunction' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:50,809] INFO Adding function SomeFunction for method public int io.confluent.ksql.function.UdfLoaderTest$SomeFunctionUdf.foo(java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:50,812] WARN Ignoring method annotated with @Udf but missing @UdfDescription. method='something' from path=internal (io.confluent.ksql.function.UdfLoader:209)
[2019-08-12 20:35:50,814] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:50,827] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffIntString(int,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:50,828] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:50,844] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongString(long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:50,846] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:50,865] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongLongString(long,long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:50,865] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:50,878] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongVarargs(long[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:50,879] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:50,889] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffStruct(org.apache.kafka.connect.data.Struct) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:50,890] INFO Adding UDF name='datetostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:50,938] INFO Adding function datetostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.DateToString.dateToString(int,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:50,940] INFO Adding UDF name='stringtodate' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:50,952] INFO Adding function stringtodate for method public int io.confluent.ksql.function.udf.datetime.StringToDate.stringToDate(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:50,954] INFO Adding UDF name='stringtotimestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:50,965] INFO Adding function stringtotimestamp for method public long io.confluent.ksql.function.udf.datetime.StringToTimestamp.stringToTimestamp(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:50,966] INFO Adding UDF name='stringtotimestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:50,978] INFO Adding function stringtotimestamp for method public long io.confluent.ksql.function.udf.datetime.StringToTimestamp.stringToTimestamp(java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:50,980] INFO Adding UDF name='timestamptostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:50,989] INFO Adding function timestamptostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.TimestampToString.timestampToString(long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:50,990] INFO Adding UDF name='timestamptostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,006] INFO Adding function timestamptostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.TimestampToString.timestampToString(long,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,009] INFO Adding UDF name='unix_date' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,016] INFO Adding function unix_date for method public int io.confluent.ksql.function.udf.datetime.UnixDate.unixDate() (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,018] INFO Adding UDF name='unix_timestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,021] INFO Adding function unix_timestamp for method public long io.confluent.ksql.function.udf.datetime.UnixTimestamp.unixTimestamp() (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,023] INFO Adding UDF name='geo_distance' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,041] INFO Adding function geo_distance for method public java.lang.Double io.confluent.ksql.function.udf.geo.GeoDistance.geoDistance(double,double,double,double,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,043] INFO Adding UDF name='geo_distance' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,054] INFO Adding function geo_distance for method public java.lang.Double io.confluent.ksql.function.udf.geo.GeoDistance.geoDistance(double,double,double,double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,057] INFO Adding UDF name='AS_ARRAY' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,068] INFO Adding function AS_ARRAY for method public final java.util.List io.confluent.ksql.function.udf.list.AsArray.asArray(java.lang.Object[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,070] INFO Adding UDF name='slice' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,082] INFO Adding function slice for method public java.util.List io.confluent.ksql.function.udf.list.Slice.slice(java.util.List,java.lang.Integer,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,084] INFO Adding UDF name='AS_MAP' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,094] INFO Adding function AS_MAP for method public final java.util.Map io.confluent.ksql.function.udf.map.AsMap.asMap(java.util.List,java.util.List) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,101] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,113] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,114] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,124] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,124] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,145] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,147] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,159] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,159] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,171] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,171] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,181] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,182] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,191] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,192] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,200] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,201] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,210] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,211] INFO Adding UDF name='elt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,223] INFO Adding function elt for method public java.lang.String io.confluent.ksql.function.udf.string.Elt.elt(int,java.lang.String[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,224] INFO Adding UDF name='field' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,236] INFO Adding function field for method public int io.confluent.ksql.function.udf.string.Field.field(java.lang.String,java.lang.String[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,238] INFO Adding UDF name='mask_keep_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,252] INFO Adding function mask_keep_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepLeftKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,253] INFO Adding UDF name='mask_keep_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,290] INFO Adding function mask_keep_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepLeftKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,291] INFO Adding UDF name='mask_keep_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,305] INFO Adding function mask_keep_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepRightKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,306] INFO Adding UDF name='mask_keep_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,316] INFO Adding function mask_keep_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepRightKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,317] INFO Adding UDF name='mask' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,328] INFO Adding function mask for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKudf.mask(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,329] INFO Adding UDF name='mask' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,339] INFO Adding function mask for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKudf.mask(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,340] INFO Adding UDF name='mask_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,353] INFO Adding function mask_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskLeftKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,353] INFO Adding UDF name='mask_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,364] INFO Adding function mask_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskLeftKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,366] INFO Adding UDF name='mask_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,379] INFO Adding function mask_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskRightKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,380] INFO Adding UDF name='mask_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,389] INFO Adding function mask_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskRightKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,391] INFO Adding UDF name='split' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,400] INFO Adding function split for method public java.util.List io.confluent.ksql.function.udf.string.SplitKudf.split(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,402] INFO Adding UDF name='substring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,413] INFO Adding function substring for method public java.lang.String io.confluent.ksql.function.udf.string.Substring.substring(java.lang.String,java.lang.Integer,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,414] INFO Adding UDF name='substring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,425] INFO Adding function substring for method public java.lang.String io.confluent.ksql.function.udf.string.Substring.substring(java.lang.String,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,426] INFO Adding UDF name='url_decode_param' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,437] INFO Adding function url_decode_param for method public java.lang.String io.confluent.ksql.function.udf.url.UrlDecodeParamKudf.decodeParam(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,439] INFO Adding UDF name='url_encode_param' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,448] INFO Adding function url_encode_param for method public java.lang.String io.confluent.ksql.function.udf.url.UrlEncodeParamKudf.encodeParam(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,449] INFO Adding UDF name='url_extract_fragment' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,460] INFO Adding function url_extract_fragment for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractFragmentKudf.extractFragment(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,461] INFO Adding UDF name='url_extract_host' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,473] INFO Adding function url_extract_host for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractHostKudf.extractHost(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,474] INFO Adding UDF name='url_extract_parameter' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,504] INFO Adding function url_extract_parameter for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractParameterKudf.extractParam(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,506] INFO Adding UDF name='url_extract_path' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,514] INFO Adding function url_extract_path for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractPathKudf.extractPath(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,515] INFO Adding UDF name='url_extract_port' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,526] INFO Adding function url_extract_port for method public java.lang.Integer io.confluent.ksql.function.udf.url.UrlExtractPortKudf.extractPort(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,527] INFO Adding UDF name='url_extract_protocol' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,538] INFO Adding function url_extract_protocol for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractProtocolKudf.extractProtocol(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,541] INFO Adding UDF name='url_extract_query' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,553] INFO Adding function url_extract_query for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractQueryKudf.extractQuery(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,555] INFO Adding UDF name='E2EConfigurableUdf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:35:51,574] INFO Adding function E2EConfigurableUdf for method public long io.confluent.ksql.integration.EndToEndIntegrationTest$ConfigurableUdf.foo(long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:35:51,583] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:35:51,637] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:35:51,694] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:35:51,752] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:35:51,773] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:35:51,795] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:35:51,815] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:35:51,843] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:35:51,896] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:35:51,922] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:35:51,958] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:35:51,982] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:35:52,003] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:35:52,025] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:35:52,047] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:35:52,070] INFO Adding UDAF name=histogram from path=internal class=class io.confluent.ksql.function.udaf.map.HistogramUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:35:52,098] INFO Adding UDAF name=WindowEnd from path=internal class=class io.confluent.ksql.function.udaf.window.WindowEndKudaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:35:52,119] INFO Adding UDAF name=WindowStart from path=internal class=class io.confluent.ksql.function.udaf.window.WindowStartKudaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:35:52,166] INFO KafkaJsonDeserializerConfig values: 
	json.fail.unknown.properties = true
	json.key.type = class io.confluent.ksql.rest.server.computation.CommandId
	json.value.type = class java.lang.Object
 (io.confluent.kafka.serializers.KafkaJsonDeserializerConfig:347)
[2019-08-12 20:35:52,498] INFO KafkaJsonDeserializerConfig values: 
	json.fail.unknown.properties = true
	json.key.type = class java.lang.Object
	json.value.type = class io.confluent.ksql.rest.server.computation.Command
 (io.confluent.kafka.serializers.KafkaJsonDeserializerConfig:347)
[2019-08-12 20:35:52,601] INFO KafkaJsonSerializerConfig values: 
	json.indent.output = false
 (io.confluent.kafka.serializers.KafkaJsonSerializerConfig:347)
[2019-08-12 20:35:52,601] INFO KafkaJsonSerializerConfig values: 
	json.indent.output = false
 (io.confluent.kafka.serializers.KafkaJsonSerializerConfig:347)
[2019-08-12 20:35:54,188] INFO DataStax Java driver for Apache Cassandra(R) (com.datastax.oss:java-driver-core) version 4.1.0 (com.datastax.oss.driver.internal.core.DefaultMavenCoordinates:37)
[2019-08-12 20:35:55,100] INFO Using native clock for microsecond precision (com.datastax.oss.driver.internal.core.time.Clock:40)
[2019-08-12 20:35:56,116] INFO Logging initialized @7712ms to org.eclipse.jetty.util.log.Slf4jLog (org.eclipse.jetty.util.log:193)
[2019-08-12 20:35:56,121] INFO Starting server (io.confluent.ksql.rest.server.KsqlServerMain:73)
[2019-08-12 20:35:56,352] INFO Adding listener: http://0.0.0.0:8088 (io.confluent.rest.Application:241)
[2019-08-12 20:35:56,790] INFO jetty-9.4.18.v20190429; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_211-b12 (org.eclipse.jetty.server.Server:370)
[2019-08-12 20:35:56,929] INFO DefaultSessionIdManager workerName=node0 (org.eclipse.jetty.server.session:365)
[2019-08-12 20:35:56,929] INFO No SessionScavenger set, using defaults (org.eclipse.jetty.server.session:370)
[2019-08-12 20:35:56,932] INFO node0 Scavenging every 600000ms (org.eclipse.jetty.server.session:149)
[2019-08-12 20:35:57,646] INFO HV000001: Hibernate Validator 5.1.3.Final (org.hibernate.validator.internal.util.Version:27)
[2019-08-12 20:35:57,807] INFO Started o.e.j.s.ServletContextHandler@cc9ef8d{/,null,AVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:855)
[2019-08-12 20:35:57,847] INFO Started o.e.j.s.ServletContextHandler@19827608{/ws,null,AVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:855)
[2019-08-12 20:35:57,869] INFO Started NetworkTrafficServerConnector@2ee39e73{HTTP/1.1,[http/1.1]}{0.0.0.0:8088} (org.eclipse.jetty.server.AbstractConnector:292)
[2019-08-12 20:35:57,869] INFO Started @9465ms (org.eclipse.jetty.server.Server:410)
[2019-08-12 20:35:57,870] WARN Creating topic _confluent-ksql-default__command_topic with replication factor of 1 which is less than 2. This is not advisable in a production environment.  (io.confluent.ksql.rest.util.KsqlInternalTopicUtils:75)
[2019-08-12 20:35:57,912] INFO Corrected retention.ms on ksql internal topic. topic:_confluent-ksql-default__command_topic, retention.ms:9223372036854775807 (io.confluent.ksql.rest.util.KsqlInternalTopicUtils:99)
[2019-08-12 20:35:57,980] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:35:57,980] INFO Build logical plan for CREATE STREAM KSQL_COMMANDS (STATEMENT STRING) WITH(VALUE_FORMAT='JSON', KAFKA_TOPIC='_confluent-ksql-default__command_topic');. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:35:57,982] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:35:58,010] INFO ProcessingLogConfig values: 
	ksql.logging.processing.rows.include = false
	ksql.logging.processing.stream.auto.create = false
	ksql.logging.processing.stream.name = KSQL_PROCESSING_LOG
	ksql.logging.processing.topic.auto.create = false
	ksql.logging.processing.topic.name = 
	ksql.logging.processing.topic.partitions = 1
	ksql.logging.processing.topic.replication.factor = 1
 (io.confluent.ksql.logging.processing.ProcessingLogConfig:347)
[2019-08-12 20:36:03,265] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:03,270] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:03,270] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:03,271] INFO Build logical plan for CREATE STREAM KSQL_PROCESSING_LOG (LOGGER STRING, LEVEL STRING, `TIME` BIGINT, MESSAGE STRUCT<`type` INTEGER, deserializationError STRUCT<errorMessage STRING, recordB64 STRING, cause ARRAY<STRING>>, recordProcessingError STRUCT<errorMessage STRING, record STRING, cause ARRAY<STRING>>, productionError STRUCT<errorMessage STRING>>) WITH (VALUE_FORMAT='JSON', KAFKA_TOPIC='default_ksql_processing_log');. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:36:03,271] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:03,277] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:03,278] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:03,278] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:03,279] INFO Build logical plan for CREATE STREAM PAGEVIEWS (viewtime BIGINT, userid VARCHAR, pageid VARCHAR) WITH (kafka_topic='pageviews', value_format='AVRO');. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:36:03,279] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:03,321] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,330] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,338] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,619] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:03,620] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,620] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,620] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,620] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:03,622] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,622] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,623] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,623] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:03,623] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,623] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,623] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,624] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:03,657] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:03,657] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:03,659] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:03,659] INFO Build logical plan for CREATE TABLE USER_VIEWS_PER_HOUR WITH (KAFKA_TOPIC='USER_VIEWS_PER_HOUR', PARTITIONS=1, REPLICAS=1) AS SELECT
  PAGEVIEWS.USERID "USERID",
  COUNT(*) "TOTAL"
FROM PAGEVIEWS PAGEVIEWS
WINDOW TUMBLING ( SIZE 1 HOURS ) 
GROUP BY PAGEVIEWS.USERID;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:36:03,724] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:03,735] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,735] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,735] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,735] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:03,736] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,736] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,736] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,736] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:03,736] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,736] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,736] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,737] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:03,737] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,737] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,737] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,737] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:03,776] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,776] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,776] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,776] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:03,777] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,777] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,777] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,777] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:03,778] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,778] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,778] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,778] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:03,778] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,778] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,779] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,779] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:03,795] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,795] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,795] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,795] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:03,796] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,796] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,796] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,796] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:03,797] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,797] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,797] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,797] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:03,797] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,798] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,798] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,798] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:03,841] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,842] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,842] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,842] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:03,842] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,842] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,843] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,843] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:03,843] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,844] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,844] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,844] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:03,845] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:03,845] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:03,845] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:03,845] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,134] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:04,134] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:04,135] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:04,135] INFO Build logical plan for CREATE TABLE FOO WITH (KAFKA_TOPIC='FOO', PARTITIONS=1, REPLICAS=1) AS SELECT
  PAGEVIEWS.PAGEID "PAGEID",
  COUNT(*) "TOTAL"
FROM PAGEVIEWS PAGEVIEWS
WINDOW TUMBLING ( SIZE 1 HOURS ) 
GROUP BY PAGEVIEWS.PAGEID;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:36:04,136] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:04,137] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,137] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,137] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,137] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,137] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,138] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,138] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,138] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,138] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,138] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,139] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,139] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,139] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,139] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,140] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,140] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,150] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,150] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,150] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,151] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,151] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,151] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,151] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,151] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,152] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,152] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,152] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,152] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,152] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,153] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,153] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,153] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,157] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,157] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,157] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,157] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,158] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,158] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,158] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,158] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,158] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,159] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,159] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,159] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,159] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,159] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,160] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,160] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,168] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,169] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,169] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,169] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,169] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,170] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,170] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,170] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,170] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,170] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,171] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,171] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,171] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,171] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,171] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,172] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,259] INFO Starting query with application id: _confluent-ksql-default_query_CTAS_FOO_1 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 20:36:04,269] INFO Starting query with application id: _confluent-ksql-default_query_CTAS_USER_VIEWS_PER_HOUR_0 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 20:36:04,308] WARN Writing to metrics Kafka topic will be disabled (io.confluent.support.metrics.PhoneHomeConfig:61)
[2019-08-12 20:36:04,308] INFO No customer ID configured -- falling back to id 'anonymous' (io.confluent.support.metrics.BaseSupportConfig:336)
[2019-08-12 20:36:04,309] WARN Enforcing customer ID 'anonymous' (io.confluent.support.metrics.PhoneHomeConfig:66)
[2019-08-12 20:36:04,339] INFO Waiting until monitored service is ready for metrics collection (io.confluent.support.metrics.BaseMetricsReporter:189)
[2019-08-12 20:36:04,339] INFO Monitored service is now ready (io.confluent.support.metrics.BaseMetricsReporter:200)
[2019-08-12 20:36:04,339] INFO Attempting to collect and submit metrics (io.confluent.support.metrics.BaseMetricsReporter:160)
[2019-08-12 20:36:04,341] WARN Please note that the version check feature of KSQL is enabled.  With this enabled, this instance is configured to collect and report anonymously the version information to Confluent, Inc. ("Confluent") or its parent, subsidiaries, affiliates or service providers every 24hours.  This Metadata may be transferred to any country in which Confluent maintains facilities.  For a more in depth discussion of how Confluent processes such information, please read our Privacy Policy located at http://www.confluent.io/privacy. By proceeding with `confluent.support.metrics.enable=true`, you agree to all such collection, transfer and use of Version information by Confluent. You can turn the version check  feature off by setting `confluent.support.metrics.enable=false` in the KSQL configuration and restarting the KSQL.  See the Confluent Platform documentation for further information. (io.confluent.ksql.version.metrics.KsqlVersionCheckerAgent:90)
[2019-08-12 20:36:04,342] INFO Server up and running (io.confluent.ksql.rest.server.KsqlServerMain:75)
[2019-08-12 20:36:04,495] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,500] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,502] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,505] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,505] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,504] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,507] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,505] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,707] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,708] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,709] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,709] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,709] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,709] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,710] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,712] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,931] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,935] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,935] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,936] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,959] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,960] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,960] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,960] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,964] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,964] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,964] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,964] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,977] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,978] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,978] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,978] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:04,992] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:04,993] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:04,993] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:04,993] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:05,009] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:05,010] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:05,010] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:05,010] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:05,534] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:05,715] INFO 127.0.0.1 - - [13/Aug/2019:03:36:05 +0000] "POST /ksql HTTP/1.1" 400 5265  493 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:36:05,717] INFO Successfully submitted metrics to Confluent via secure endpoint (io.confluent.support.metrics.submitters.ConfluentSubmitter:143)
[2019-08-12 20:36:06,404] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:06,404] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:06,404] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:06,404] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:06,472] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:36:06,473] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:36:06,473] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:36:06,473] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:15,254] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:15,527] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:15,543] INFO Executing statement: drop materialized asdf; (io.confluent.ksql.rest.server.computation.CommandRunner:166)
[2019-08-12 20:36:15,544] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:15,544] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:15,545] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:15,545] INFO Build logical plan for drop materialized asdf;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:36:15,545] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:15,546] INFO Executed statement: drop materialized asdf; (io.confluent.ksql.rest.server.computation.CommandRunner:173)
[2019-08-12 20:36:15,585] INFO 127.0.0.1 - - [13/Aug/2019:03:36:15 +0000] "POST /ksql HTTP/1.1" 200 254  342 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:36:22,444] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:22,527] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:36:22,532] INFO Executing statement: drop materialized ghjk; (io.confluent.ksql.rest.server.computation.CommandRunner:166)
[2019-08-12 20:36:22,533] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:22,533] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:22,534] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:22,534] INFO Build logical plan for drop materialized ghjk;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:36:22,534] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:36:22,535] INFO Executed statement: drop materialized ghjk; (io.confluent.ksql.rest.server.computation.CommandRunner:173)
[2019-08-12 20:36:22,543] INFO 127.0.0.1 - - [13/Aug/2019:03:36:22 +0000] "POST /ksql HTTP/1.1" 200 238  107 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:36:28,605] INFO Stopped NetworkTrafficServerConnector@2ee39e73{HTTP/1.1,[http/1.1]}{0.0.0.0:8088} (org.eclipse.jetty.server.AbstractConnector:341)
[2019-08-12 20:36:28,605] INFO node0 Stopped scavenging (org.eclipse.jetty.server.session:167)
[2019-08-12 20:36:28,607] INFO Stopped o.e.j.s.ServletContextHandler@19827608{/ws,null,UNAVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:1045)
[2019-08-12 20:36:28,619] INFO Stopped o.e.j.s.ServletContextHandler@cc9ef8d{/,null,UNAVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:1045)
[2019-08-12 20:36:28,621] INFO Server shutting down (io.confluent.ksql.rest.server.KsqlServerMain:78)
[2019-08-12 20:56:47,309] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:56:47,343] INFO KsqlRestConfig values: 
	access.control.allow.headers = 
	access.control.allow.methods = 
	access.control.allow.origin = 
	authentication.method = NONE
	authentication.realm = 
	authentication.roles = [*]
	authentication.skip.paths = []
	compression.enable = true
	debug = false
	idle.timeout.ms = 30000
	ksql.server.command.response.timeout.ms = 5000
	ksql.server.install.dir = /Users/zlim/desktop/github/ksql
	ksql.server.preconditions = []
	ksql.server.websockets.num.threads = 5
	listeners = [http://0.0.0.0:8088]
	metric.reporters = []
	metrics.jmx.prefix = rest-utils
	metrics.num.samples = 2
	metrics.sample.window.ms = 30000
	metrics.tag.map = []
	port = 8080
	query.stream.disconnect.check = 1000
	request.logger.name = io.confluent.rest-utils.requests
	resource.extension.classes = []
	response.mediatype.default = application/json
	response.mediatype.preferred = [application/json]
	rest.servlet.initializor.classes = []
	shutdown.graceful.ms = 1000
	ssl.cipher.suites = []
	ssl.client.auth = false
	ssl.client.authentication = NONE
	ssl.enabled.protocols = []
	ssl.endpoint.identification.algorithm = null
	ssl.key.password = [hidden]
	ssl.keymanager.algorithm = 
	ssl.keystore.location = 
	ssl.keystore.password = [hidden]
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = 
	ssl.trustmanager.algorithm = 
	ssl.truststore.location = 
	ssl.truststore.password = [hidden]
	ssl.truststore.type = JKS
	websocket.path.prefix = /ws
	websocket.servlet.initializor.classes = []
 (io.confluent.ksql.rest.server.KsqlRestConfig:347)
[2019-08-12 20:56:47,379] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:56:47,391] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:56:47,393] INFO ProcessingLogConfig values: 
	ksql.logging.processing.rows.include = false
	ksql.logging.processing.stream.auto.create = true
	ksql.logging.processing.stream.name = KSQL_PROCESSING_LOG
	ksql.logging.processing.topic.auto.create = true
	ksql.logging.processing.topic.name = 
	ksql.logging.processing.topic.partitions = 1
	ksql.logging.processing.topic.replication.factor = 1
 (io.confluent.ksql.logging.processing.ProcessingLogConfig:347)
[2019-08-12 20:56:47,635] INFO Setting UDF blacklisted classes to:  (io.confluent.ksql.function.Blacklist:70)
[2019-08-12 20:56:47,914] INFO Adding UDF name='ComplexFunction' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,189] INFO Adding function ComplexFunction for method public java.lang.Object io.confluent.ksql.function.UdfLoaderTest$ComplexUdf.foo(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,342] INFO Adding UDF name='ConfigurableUdf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,394] INFO Adding function ConfigurableUdf for method public int io.confluent.ksql.function.UdfLoaderTest$ConfigurableUdf.foo(int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,395] INFO Adding UDF name='SomeFunction' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,415] INFO Adding function SomeFunction for method public int io.confluent.ksql.function.UdfLoaderTest$SomeFunctionUdf.foo(java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,419] WARN Ignoring method annotated with @Udf but missing @UdfDescription. method='something' from path=internal (io.confluent.ksql.function.UdfLoader:209)
[2019-08-12 20:56:48,421] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,436] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffIntString(int,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,437] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,450] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongString(long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,451] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,462] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongLongString(long,long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,462] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,472] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongVarargs(long[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,473] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,484] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffStruct(org.apache.kafka.connect.data.Struct) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,486] INFO Adding UDF name='datetostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,556] INFO Adding function datetostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.DateToString.dateToString(int,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,558] INFO Adding UDF name='stringtodate' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,581] INFO Adding function stringtodate for method public int io.confluent.ksql.function.udf.datetime.StringToDate.stringToDate(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,583] INFO Adding UDF name='stringtotimestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,593] INFO Adding function stringtotimestamp for method public long io.confluent.ksql.function.udf.datetime.StringToTimestamp.stringToTimestamp(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,594] INFO Adding UDF name='stringtotimestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,608] INFO Adding function stringtotimestamp for method public long io.confluent.ksql.function.udf.datetime.StringToTimestamp.stringToTimestamp(java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,609] INFO Adding UDF name='timestamptostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,622] INFO Adding function timestamptostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.TimestampToString.timestampToString(long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,623] INFO Adding UDF name='timestamptostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,634] INFO Adding function timestamptostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.TimestampToString.timestampToString(long,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,636] INFO Adding UDF name='unix_date' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,639] INFO Adding function unix_date for method public int io.confluent.ksql.function.udf.datetime.UnixDate.unixDate() (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,640] INFO Adding UDF name='unix_timestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,643] INFO Adding function unix_timestamp for method public long io.confluent.ksql.function.udf.datetime.UnixTimestamp.unixTimestamp() (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,644] INFO Adding UDF name='geo_distance' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,658] INFO Adding function geo_distance for method public java.lang.Double io.confluent.ksql.function.udf.geo.GeoDistance.geoDistance(double,double,double,double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,659] INFO Adding UDF name='geo_distance' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,690] INFO Adding function geo_distance for method public java.lang.Double io.confluent.ksql.function.udf.geo.GeoDistance.geoDistance(double,double,double,double,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,693] INFO Adding UDF name='AS_ARRAY' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,704] INFO Adding function AS_ARRAY for method public final java.util.List io.confluent.ksql.function.udf.list.AsArray.asArray(java.lang.Object[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,705] INFO Adding UDF name='slice' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,717] INFO Adding function slice for method public java.util.List io.confluent.ksql.function.udf.list.Slice.slice(java.util.List,java.lang.Integer,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,718] INFO Adding UDF name='AS_MAP' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,730] INFO Adding function AS_MAP for method public final java.util.Map io.confluent.ksql.function.udf.map.AsMap.asMap(java.util.List,java.util.List) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,738] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,750] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,751] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,762] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,762] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,772] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,773] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,783] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,783] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,792] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,792] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,805] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,806] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,816] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,817] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,826] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,827] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,835] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,836] INFO Adding UDF name='elt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,844] INFO Adding function elt for method public java.lang.String io.confluent.ksql.function.udf.string.Elt.elt(int,java.lang.String[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,846] INFO Adding UDF name='field' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,857] INFO Adding function field for method public int io.confluent.ksql.function.udf.string.Field.field(java.lang.String,java.lang.String[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,859] INFO Adding UDF name='mask_keep_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,873] INFO Adding function mask_keep_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepLeftKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,874] INFO Adding UDF name='mask_keep_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,883] INFO Adding function mask_keep_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepLeftKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,884] INFO Adding UDF name='mask_keep_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,919] INFO Adding function mask_keep_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepRightKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,920] INFO Adding UDF name='mask_keep_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,930] INFO Adding function mask_keep_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepRightKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,931] INFO Adding UDF name='mask' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,942] INFO Adding function mask for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKudf.mask(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,942] INFO Adding UDF name='mask' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,953] INFO Adding function mask for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKudf.mask(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,954] INFO Adding UDF name='mask_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,966] INFO Adding function mask_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskLeftKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,967] INFO Adding UDF name='mask_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,978] INFO Adding function mask_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskLeftKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,979] INFO Adding UDF name='mask_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:48,991] INFO Adding function mask_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskRightKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:48,992] INFO Adding UDF name='mask_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:49,002] INFO Adding function mask_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskRightKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:49,002] INFO Adding UDF name='split' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:49,012] INFO Adding function split for method public java.util.List io.confluent.ksql.function.udf.string.SplitKudf.split(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:49,014] INFO Adding UDF name='substring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:49,025] INFO Adding function substring for method public java.lang.String io.confluent.ksql.function.udf.string.Substring.substring(java.lang.String,java.lang.Integer,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:49,026] INFO Adding UDF name='substring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:49,036] INFO Adding function substring for method public java.lang.String io.confluent.ksql.function.udf.string.Substring.substring(java.lang.String,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:49,038] INFO Adding UDF name='url_decode_param' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:49,047] INFO Adding function url_decode_param for method public java.lang.String io.confluent.ksql.function.udf.url.UrlDecodeParamKudf.decodeParam(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:49,048] INFO Adding UDF name='url_encode_param' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:49,058] INFO Adding function url_encode_param for method public java.lang.String io.confluent.ksql.function.udf.url.UrlEncodeParamKudf.encodeParam(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:49,059] INFO Adding UDF name='url_extract_fragment' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:49,071] INFO Adding function url_extract_fragment for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractFragmentKudf.extractFragment(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:49,073] INFO Adding UDF name='url_extract_host' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:49,082] INFO Adding function url_extract_host for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractHostKudf.extractHost(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:49,083] INFO Adding UDF name='url_extract_parameter' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:49,118] INFO Adding function url_extract_parameter for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractParameterKudf.extractParam(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:49,119] INFO Adding UDF name='url_extract_path' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:49,127] INFO Adding function url_extract_path for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractPathKudf.extractPath(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:49,128] INFO Adding UDF name='url_extract_port' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:49,139] INFO Adding function url_extract_port for method public java.lang.Integer io.confluent.ksql.function.udf.url.UrlExtractPortKudf.extractPort(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:49,141] INFO Adding UDF name='url_extract_protocol' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:49,150] INFO Adding function url_extract_protocol for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractProtocolKudf.extractProtocol(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:49,151] INFO Adding UDF name='url_extract_query' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:49,160] INFO Adding function url_extract_query for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractQueryKudf.extractQuery(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:49,162] INFO Adding UDF name='E2EConfigurableUdf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 20:56:49,176] INFO Adding function E2EConfigurableUdf for method public long io.confluent.ksql.integration.EndToEndIntegrationTest$ConfigurableUdf.foo(long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 20:56:49,184] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:56:49,229] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:56:49,244] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:56:49,257] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:56:49,273] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:56:49,292] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:56:49,306] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:56:49,321] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:56:49,337] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:56:49,350] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:56:49,365] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:56:49,379] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:56:49,399] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:56:49,413] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:56:49,427] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:56:49,444] INFO Adding UDAF name=histogram from path=internal class=class io.confluent.ksql.function.udaf.map.HistogramUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:56:49,459] INFO Adding UDAF name=WindowEnd from path=internal class=class io.confluent.ksql.function.udaf.window.WindowEndKudaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:56:49,474] INFO Adding UDAF name=WindowStart from path=internal class=class io.confluent.ksql.function.udaf.window.WindowStartKudaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 20:56:49,513] INFO KafkaJsonDeserializerConfig values: 
	json.fail.unknown.properties = true
	json.key.type = class io.confluent.ksql.rest.server.computation.CommandId
	json.value.type = class java.lang.Object
 (io.confluent.kafka.serializers.KafkaJsonDeserializerConfig:347)
[2019-08-12 20:56:49,754] INFO KafkaJsonDeserializerConfig values: 
	json.fail.unknown.properties = true
	json.key.type = class java.lang.Object
	json.value.type = class io.confluent.ksql.rest.server.computation.Command
 (io.confluent.kafka.serializers.KafkaJsonDeserializerConfig:347)
[2019-08-12 20:56:49,802] INFO KafkaJsonSerializerConfig values: 
	json.indent.output = false
 (io.confluent.kafka.serializers.KafkaJsonSerializerConfig:347)
[2019-08-12 20:56:49,802] INFO KafkaJsonSerializerConfig values: 
	json.indent.output = false
 (io.confluent.kafka.serializers.KafkaJsonSerializerConfig:347)
[2019-08-12 20:56:50,977] INFO DataStax Java driver for Apache Cassandra(R) (com.datastax.oss:java-driver-core) version 4.1.0 (com.datastax.oss.driver.internal.core.DefaultMavenCoordinates:37)
[2019-08-12 20:56:51,774] INFO Using native clock for microsecond precision (com.datastax.oss.driver.internal.core.time.Clock:40)
[2019-08-12 20:56:52,836] INFO Logging initialized @7427ms to org.eclipse.jetty.util.log.Slf4jLog (org.eclipse.jetty.util.log:193)
[2019-08-12 20:56:52,843] INFO Starting server (io.confluent.ksql.rest.server.KsqlServerMain:73)
[2019-08-12 20:56:53,296] INFO Adding listener: http://0.0.0.0:8088 (io.confluent.rest.Application:241)
[2019-08-12 20:56:53,684] INFO jetty-9.4.18.v20190429; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_211-b12 (org.eclipse.jetty.server.Server:370)
[2019-08-12 20:56:53,751] INFO DefaultSessionIdManager workerName=node0 (org.eclipse.jetty.server.session:365)
[2019-08-12 20:56:53,751] INFO No SessionScavenger set, using defaults (org.eclipse.jetty.server.session:370)
[2019-08-12 20:56:53,753] INFO node0 Scavenging every 660000ms (org.eclipse.jetty.server.session:149)
[2019-08-12 20:56:54,473] INFO HV000001: Hibernate Validator 5.1.3.Final (org.hibernate.validator.internal.util.Version:27)
[2019-08-12 20:56:54,660] INFO Started o.e.j.s.ServletContextHandler@7742a45c{/,null,AVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:855)
[2019-08-12 20:56:54,708] INFO Started o.e.j.s.ServletContextHandler@d5e575c{/ws,null,AVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:855)
[2019-08-12 20:56:54,729] INFO Started NetworkTrafficServerConnector@37e0056e{HTTP/1.1,[http/1.1]}{0.0.0.0:8088} (org.eclipse.jetty.server.AbstractConnector:292)
[2019-08-12 20:56:54,729] INFO Started @9320ms (org.eclipse.jetty.server.Server:410)
[2019-08-12 20:56:54,731] WARN Creating topic _confluent-ksql-default__command_topic with replication factor of 1 which is less than 2. This is not advisable in a production environment.  (io.confluent.ksql.rest.util.KsqlInternalTopicUtils:75)
[2019-08-12 20:56:54,771] INFO Corrected retention.ms on ksql internal topic. topic:_confluent-ksql-default__command_topic, retention.ms:9223372036854775807 (io.confluent.ksql.rest.util.KsqlInternalTopicUtils:99)
[2019-08-12 20:56:54,830] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:56:54,830] INFO Build logical plan for CREATE STREAM KSQL_COMMANDS (STATEMENT STRING) WITH(VALUE_FORMAT='JSON', KAFKA_TOPIC='_confluent-ksql-default__command_topic');. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:56:54,831] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:56:54,852] INFO ProcessingLogConfig values: 
	ksql.logging.processing.rows.include = false
	ksql.logging.processing.stream.auto.create = false
	ksql.logging.processing.stream.name = KSQL_PROCESSING_LOG
	ksql.logging.processing.topic.auto.create = false
	ksql.logging.processing.topic.name = 
	ksql.logging.processing.topic.partitions = 1
	ksql.logging.processing.topic.replication.factor = 1
 (io.confluent.ksql.logging.processing.ProcessingLogConfig:347)
[2019-08-12 20:56:59,585] INFO 127.0.0.1 - - [13/Aug/2019:03:56:59 +0000] "POST /ksql HTTP/1.1" 503 113  133 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:57:00,175] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:00,180] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:00,181] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:00,181] INFO Build logical plan for CREATE STREAM KSQL_PROCESSING_LOG (LOGGER STRING, LEVEL STRING, `TIME` BIGINT, MESSAGE STRUCT<`type` INTEGER, deserializationError STRUCT<errorMessage STRING, recordB64 STRING, cause ARRAY<STRING>>, recordProcessingError STRUCT<errorMessage STRING, record STRING, cause ARRAY<STRING>>, productionError STRUCT<errorMessage STRING>>) WITH (VALUE_FORMAT='JSON', KAFKA_TOPIC='default_ksql_processing_log');. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:57:00,182] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:00,188] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:00,188] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:00,189] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:00,189] INFO Build logical plan for CREATE STREAM PAGEVIEWS (viewtime BIGINT, userid VARCHAR, pageid VARCHAR) WITH (kafka_topic='pageviews', value_format='AVRO');. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:57:00,190] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:00,215] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,221] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,227] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,488] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:00,490] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,490] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,490] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,490] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:00,493] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,493] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,494] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,494] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:00,494] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,494] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,494] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,495] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:00,529] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:00,530] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:00,532] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:00,532] INFO Build logical plan for CREATE TABLE USER_VIEWS_PER_HOUR WITH (KAFKA_TOPIC='USER_VIEWS_PER_HOUR', PARTITIONS=1, REPLICAS=1) AS SELECT
  PAGEVIEWS.USERID "USERID",
  COUNT(*) "TOTAL"
FROM PAGEVIEWS PAGEVIEWS
WINDOW TUMBLING ( SIZE 1 HOURS ) 
GROUP BY PAGEVIEWS.USERID;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:57:00,624] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:00,641] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,641] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,641] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,641] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:00,642] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,642] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,642] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,642] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:00,643] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,643] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,643] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,643] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:00,644] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,644] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,644] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,644] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:00,696] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,697] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,697] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,697] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:00,697] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,698] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,698] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,698] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:00,698] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,699] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,699] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,699] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:00,699] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,699] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,700] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,700] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:00,722] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,722] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,723] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,723] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:00,723] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,723] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,723] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,724] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:00,724] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,724] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,724] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,724] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:00,725] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,725] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,725] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,725] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:00,777] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,777] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,778] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,778] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:00,779] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,780] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,780] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,781] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:00,781] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,783] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,784] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,785] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:00,786] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:00,786] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:00,786] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:00,787] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,142] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:01,142] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:01,143] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:01,143] INFO Build logical plan for CREATE TABLE FOO WITH (KAFKA_TOPIC='FOO', PARTITIONS=1, REPLICAS=1) AS SELECT
  PAGEVIEWS.PAGEID "PAGEID",
  COUNT(*) "TOTAL"
FROM PAGEVIEWS PAGEVIEWS
WINDOW TUMBLING ( SIZE 1 HOURS ) 
GROUP BY PAGEVIEWS.PAGEID;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:57:01,144] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:01,145] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,145] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,146] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,146] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,146] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,146] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,146] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,146] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,148] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,148] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,148] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,149] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,149] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,149] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,149] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,149] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,157] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,158] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,158] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,158] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,158] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,158] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,158] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,159] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,159] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,159] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,159] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,159] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,159] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,160] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,160] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,160] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,164] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,164] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,164] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,164] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,165] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,165] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,165] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,165] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,165] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,165] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,165] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,166] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,166] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,166] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,167] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,167] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,172] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,173] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,173] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,173] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,173] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,173] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,174] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,174] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,174] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,174] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,174] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,174] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,175] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,175] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,175] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,175] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,252] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:01,253] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:01,253] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:01,254] INFO Build logical plan for drop materialized asdf;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:57:01,254] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:01,255] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:01,256] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:01,256] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:01,256] INFO Build logical plan for drop materialized ghjk;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 20:57:01,257] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 20:57:01,257] INFO Starting query with application id: _confluent-ksql-default_query_CTAS_FOO_1 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 20:57:01,260] INFO Starting query with application id: _confluent-ksql-default_query_CTAS_USER_VIEWS_PER_HOUR_0 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 20:57:01,263] WARN Writing to metrics Kafka topic will be disabled (io.confluent.support.metrics.PhoneHomeConfig:61)
[2019-08-12 20:57:01,264] INFO No customer ID configured -- falling back to id 'anonymous' (io.confluent.support.metrics.BaseSupportConfig:336)
[2019-08-12 20:57:01,264] WARN Enforcing customer ID 'anonymous' (io.confluent.support.metrics.PhoneHomeConfig:66)
[2019-08-12 20:57:01,271] WARN Please note that the version check feature of KSQL is enabled.  With this enabled, this instance is configured to collect and report anonymously the version information to Confluent, Inc. ("Confluent") or its parent, subsidiaries, affiliates or service providers every 24hours.  This Metadata may be transferred to any country in which Confluent maintains facilities.  For a more in depth discussion of how Confluent processes such information, please read our Privacy Policy located at http://www.confluent.io/privacy. By proceeding with `confluent.support.metrics.enable=true`, you agree to all such collection, transfer and use of Version information by Confluent. You can turn the version check  feature off by setting `confluent.support.metrics.enable=false` in the KSQL configuration and restarting the KSQL.  See the Confluent Platform documentation for further information. (io.confluent.ksql.version.metrics.KsqlVersionCheckerAgent:90)
[2019-08-12 20:57:01,271] INFO Server up and running (io.confluent.ksql.rest.server.KsqlServerMain:75)
[2019-08-12 20:57:01,272] INFO Waiting until monitored service is ready for metrics collection (io.confluent.support.metrics.BaseMetricsReporter:189)
[2019-08-12 20:57:01,275] INFO Monitored service is now ready (io.confluent.support.metrics.BaseMetricsReporter:200)
[2019-08-12 20:57:01,275] INFO Attempting to collect and submit metrics (io.confluent.support.metrics.BaseMetricsReporter:160)
[2019-08-12 20:57:01,579] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,586] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,587] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,586] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,587] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,591] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,591] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,592] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,697] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,697] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,697] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,698] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,699] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,700] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,700] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,700] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,769] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,769] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,770] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,770] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,794] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,794] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,794] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,794] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,817] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,818] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,818] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,818] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,845] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,845] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,845] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,845] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,870] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,870] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,871] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,871] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:01,888] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:01,888] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:01,889] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:01,889] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:02,994] INFO Successfully submitted metrics to Confluent via secure endpoint (io.confluent.support.metrics.submitters.ConfluentSubmitter:143)
[2019-08-12 20:57:03,408] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:03,408] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:03,409] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:03,409] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:03,410] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 20:57:03,425] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 20:57:03,427] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 20:57:03,427] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:04,729] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:04,766] INFO 127.0.0.1 - - [13/Aug/2019:03:57:04 +0000] "POST /ksql HTTP/1.1" 200 264  178 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:57:21,763] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:22,614] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:22,629] INFO Executing statement: create materialized view ppp as select * from user_views_per_hour; (io.confluent.ksql.rest.server.computation.CommandRunner:166)
[2019-08-12 20:57:22,630] INFO Executed statement: create materialized view ppp as select * from user_views_per_hour; (io.confluent.ksql.rest.server.computation.CommandRunner:173)
[2019-08-12 20:57:22,648] INFO 127.0.0.1 - - [13/Aug/2019:03:57:21 +0000] "POST /ksql HTTP/1.1" 200 275  913 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:57:28,121] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 20:57:28,147] INFO 127.0.0.1 - - [13/Aug/2019:03:57:28 +0000] "POST /ksql HTTP/1.1" 200 477  34 (io.confluent.rest-utils.requests:62)
[2019-08-12 20:57:28,366] INFO 127.0.0.1 - - [13/Aug/2019:03:57:28 +0000] "POST /query HTTP/1.1" 200 1215  99 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:03:41,693] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:03:41,715] INFO 127.0.0.1 - - [13/Aug/2019:04:03:41 +0000] "POST /ksql HTTP/1.1" 200 4204  49 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:03:47,953] INFO Printing topic 'USER_VIEWS_PER_HOUR' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:261)
[2019-08-12 21:03:56,089] INFO 127.0.0.1 - - [13/Aug/2019:04:03:47 +0000] "POST /query HTTP/1.1" 200 2152  8164 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:04:49,039] INFO 127.0.0.1 - - [13/Aug/2019:04:04:49 +0000] "GET /info HTTP/1.1" 200 123  33 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:04:49,045] INFO 127.0.0.1 - - [13/Aug/2019:04:04:49 +0000] "GET /info HTTP/1.1" 200 123  2 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:04:49,066] INFO 127.0.0.1 - - [13/Aug/2019:04:04:49 +0000] "GET /info HTTP/1.1" 200 123  4 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:04:49,100] INFO 127.0.0.1 - - [13/Aug/2019:04:04:49 +0000] "GET /info HTTP/1.1" 200 123  2 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:04:49,115] INFO 127.0.0.1 - - [13/Aug/2019:04:04:49 +0000] "GET /info HTTP/1.1" 200 123  3 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:04:49,778] INFO 127.0.0.1 - - [13/Aug/2019:04:04:49 +0000] "GET /info HTTP/1.1" 200 123  2 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:32:02,026] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:32:02,104] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:32:02,109] INFO Executing statement: drop materialized ppp; (io.confluent.ksql.rest.server.computation.CommandRunner:166)
[2019-08-12 21:32:02,110] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:32:02,110] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:32:02,111] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:32:02,111] INFO Build logical plan for drop materialized ppp;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 21:32:02,112] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:32:02,112] INFO Executed statement: drop materialized ppp; (io.confluent.ksql.rest.server.computation.CommandRunner:173)
[2019-08-12 21:32:02,120] INFO 127.0.0.1 - - [13/Aug/2019:04:32:01 +0000] "POST /ksql HTTP/1.1" 200 251  146 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:32:08,989] INFO Stopped NetworkTrafficServerConnector@37e0056e{HTTP/1.1,[http/1.1]}{0.0.0.0:8088} (org.eclipse.jetty.server.AbstractConnector:341)
[2019-08-12 21:32:08,990] INFO node0 Stopped scavenging (org.eclipse.jetty.server.session:167)
[2019-08-12 21:32:08,993] INFO Stopped o.e.j.s.ServletContextHandler@d5e575c{/ws,null,UNAVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:1045)
[2019-08-12 21:32:08,999] INFO Stopped o.e.j.s.ServletContextHandler@7742a45c{/,null,UNAVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:1045)
[2019-08-12 21:32:09,001] INFO Server shutting down (io.confluent.ksql.rest.server.KsqlServerMain:78)
[2019-08-12 21:37:47,069] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:37:47,096] INFO KsqlRestConfig values: 
	access.control.allow.headers = 
	access.control.allow.methods = 
	access.control.allow.origin = 
	authentication.method = NONE
	authentication.realm = 
	authentication.roles = [*]
	authentication.skip.paths = []
	compression.enable = true
	debug = false
	idle.timeout.ms = 30000
	ksql.server.command.response.timeout.ms = 5000
	ksql.server.install.dir = /Users/zlim/desktop/github/ksql
	ksql.server.preconditions = []
	ksql.server.websockets.num.threads = 5
	listeners = [http://0.0.0.0:8088]
	metric.reporters = []
	metrics.jmx.prefix = rest-utils
	metrics.num.samples = 2
	metrics.sample.window.ms = 30000
	metrics.tag.map = []
	port = 8080
	query.stream.disconnect.check = 1000
	request.logger.name = io.confluent.rest-utils.requests
	resource.extension.classes = []
	response.mediatype.default = application/json
	response.mediatype.preferred = [application/json]
	rest.servlet.initializor.classes = []
	shutdown.graceful.ms = 1000
	ssl.cipher.suites = []
	ssl.client.auth = false
	ssl.client.authentication = NONE
	ssl.enabled.protocols = []
	ssl.endpoint.identification.algorithm = null
	ssl.key.password = [hidden]
	ssl.keymanager.algorithm = 
	ssl.keystore.location = 
	ssl.keystore.password = [hidden]
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = 
	ssl.trustmanager.algorithm = 
	ssl.truststore.location = 
	ssl.truststore.password = [hidden]
	ssl.truststore.type = JKS
	websocket.path.prefix = /ws
	websocket.servlet.initializor.classes = []
 (io.confluent.ksql.rest.server.KsqlRestConfig:347)
[2019-08-12 21:37:47,140] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:37:47,151] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:37:47,153] INFO ProcessingLogConfig values: 
	ksql.logging.processing.rows.include = false
	ksql.logging.processing.stream.auto.create = true
	ksql.logging.processing.stream.name = KSQL_PROCESSING_LOG
	ksql.logging.processing.topic.auto.create = true
	ksql.logging.processing.topic.name = 
	ksql.logging.processing.topic.partitions = 1
	ksql.logging.processing.topic.replication.factor = 1
 (io.confluent.ksql.logging.processing.ProcessingLogConfig:347)
[2019-08-12 21:37:47,389] INFO Setting UDF blacklisted classes to:  (io.confluent.ksql.function.Blacklist:70)
[2019-08-12 21:37:47,691] INFO Adding UDF name='ComplexFunction' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,031] INFO Adding function ComplexFunction for method public java.lang.Object io.confluent.ksql.function.UdfLoaderTest$ComplexUdf.foo(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,281] INFO Adding UDF name='ConfigurableUdf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,381] INFO Adding function ConfigurableUdf for method public int io.confluent.ksql.function.UdfLoaderTest$ConfigurableUdf.foo(int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,382] INFO Adding UDF name='SomeFunction' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,399] INFO Adding function SomeFunction for method public int io.confluent.ksql.function.UdfLoaderTest$SomeFunctionUdf.foo(java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,402] WARN Ignoring method annotated with @Udf but missing @UdfDescription. method='something' from path=internal (io.confluent.ksql.function.UdfLoader:209)
[2019-08-12 21:37:48,404] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,424] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffIntString(int,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,424] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,442] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongString(long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,442] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,455] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongLongString(long,long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,456] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,468] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongVarargs(long[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,469] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,487] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffStruct(org.apache.kafka.connect.data.Struct) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,489] INFO Adding UDF name='datetostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,562] INFO Adding function datetostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.DateToString.dateToString(int,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,564] INFO Adding UDF name='stringtodate' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,609] INFO Adding function stringtodate for method public int io.confluent.ksql.function.udf.datetime.StringToDate.stringToDate(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,611] INFO Adding UDF name='stringtotimestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,632] INFO Adding function stringtotimestamp for method public long io.confluent.ksql.function.udf.datetime.StringToTimestamp.stringToTimestamp(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,634] INFO Adding UDF name='stringtotimestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,649] INFO Adding function stringtotimestamp for method public long io.confluent.ksql.function.udf.datetime.StringToTimestamp.stringToTimestamp(java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,651] INFO Adding UDF name='timestamptostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,669] INFO Adding function timestamptostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.TimestampToString.timestampToString(long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,670] INFO Adding UDF name='timestamptostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,705] INFO Adding function timestamptostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.TimestampToString.timestampToString(long,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,708] INFO Adding UDF name='unix_date' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,714] INFO Adding function unix_date for method public int io.confluent.ksql.function.udf.datetime.UnixDate.unixDate() (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,716] INFO Adding UDF name='unix_timestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,720] INFO Adding function unix_timestamp for method public long io.confluent.ksql.function.udf.datetime.UnixTimestamp.unixTimestamp() (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,721] INFO Adding UDF name='geo_distance' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,747] INFO Adding function geo_distance for method public java.lang.Double io.confluent.ksql.function.udf.geo.GeoDistance.geoDistance(double,double,double,double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,749] INFO Adding UDF name='geo_distance' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,765] INFO Adding function geo_distance for method public java.lang.Double io.confluent.ksql.function.udf.geo.GeoDistance.geoDistance(double,double,double,double,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,770] INFO Adding UDF name='AS_ARRAY' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,784] INFO Adding function AS_ARRAY for method public final java.util.List io.confluent.ksql.function.udf.list.AsArray.asArray(java.lang.Object[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,789] INFO Adding UDF name='slice' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,831] INFO Adding function slice for method public java.util.List io.confluent.ksql.function.udf.list.Slice.slice(java.util.List,java.lang.Integer,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,834] INFO Adding UDF name='AS_MAP' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,854] INFO Adding function AS_MAP for method public final java.util.Map io.confluent.ksql.function.udf.map.AsMap.asMap(java.util.List,java.util.List) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,862] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,883] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,884] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,902] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,902] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,930] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,932] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,948] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,948] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,961] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,962] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,973] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,974] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:48,986] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:48,987] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,030] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,031] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,081] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,082] INFO Adding UDF name='elt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,111] INFO Adding function elt for method public java.lang.String io.confluent.ksql.function.udf.string.Elt.elt(int,java.lang.String[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,112] INFO Adding UDF name='field' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,125] INFO Adding function field for method public int io.confluent.ksql.function.udf.string.Field.field(java.lang.String,java.lang.String[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,128] INFO Adding UDF name='mask_keep_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,173] INFO Adding function mask_keep_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepLeftKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,174] INFO Adding UDF name='mask_keep_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,190] INFO Adding function mask_keep_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepLeftKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,191] INFO Adding UDF name='mask_keep_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,205] INFO Adding function mask_keep_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepRightKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,206] INFO Adding UDF name='mask_keep_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,217] INFO Adding function mask_keep_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepRightKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,219] INFO Adding UDF name='mask' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,234] INFO Adding function mask for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKudf.mask(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,234] INFO Adding UDF name='mask' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,251] INFO Adding function mask for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKudf.mask(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,252] INFO Adding UDF name='mask_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,270] INFO Adding function mask_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskLeftKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,271] INFO Adding UDF name='mask_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,286] INFO Adding function mask_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskLeftKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,288] INFO Adding UDF name='mask_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,303] INFO Adding function mask_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskRightKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,303] INFO Adding UDF name='mask_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,322] INFO Adding function mask_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskRightKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,325] INFO Adding UDF name='split' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,345] INFO Adding function split for method public java.util.List io.confluent.ksql.function.udf.string.SplitKudf.split(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,347] INFO Adding UDF name='substring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,393] INFO Adding function substring for method public java.lang.String io.confluent.ksql.function.udf.string.Substring.substring(java.lang.String,java.lang.Integer,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,396] INFO Adding UDF name='substring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,412] INFO Adding function substring for method public java.lang.String io.confluent.ksql.function.udf.string.Substring.substring(java.lang.String,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,415] INFO Adding UDF name='url_decode_param' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,427] INFO Adding function url_decode_param for method public java.lang.String io.confluent.ksql.function.udf.url.UrlDecodeParamKudf.decodeParam(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,428] INFO Adding UDF name='url_encode_param' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,449] INFO Adding function url_encode_param for method public java.lang.String io.confluent.ksql.function.udf.url.UrlEncodeParamKudf.encodeParam(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,450] INFO Adding UDF name='url_extract_fragment' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,468] INFO Adding function url_extract_fragment for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractFragmentKudf.extractFragment(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,471] INFO Adding UDF name='url_extract_host' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,484] INFO Adding function url_extract_host for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractHostKudf.extractHost(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,486] INFO Adding UDF name='url_extract_parameter' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,530] INFO Adding function url_extract_parameter for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractParameterKudf.extractParam(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,531] INFO Adding UDF name='url_extract_path' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,544] INFO Adding function url_extract_path for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractPathKudf.extractPath(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,546] INFO Adding UDF name='url_extract_port' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,561] INFO Adding function url_extract_port for method public java.lang.Integer io.confluent.ksql.function.udf.url.UrlExtractPortKudf.extractPort(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,563] INFO Adding UDF name='url_extract_protocol' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,584] INFO Adding function url_extract_protocol for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractProtocolKudf.extractProtocol(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,585] INFO Adding UDF name='url_extract_query' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,599] INFO Adding function url_extract_query for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractQueryKudf.extractQuery(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,602] INFO Adding UDF name='E2EConfigurableUdf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 21:37:49,648] INFO Adding function E2EConfigurableUdf for method public long io.confluent.ksql.integration.EndToEndIntegrationTest$ConfigurableUdf.foo(long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 21:37:49,713] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 21:37:49,776] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 21:37:49,811] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 21:37:49,913] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 21:37:49,947] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 21:37:49,976] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 21:37:50,021] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 21:37:50,062] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 21:37:50,105] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 21:37:50,144] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 21:37:50,194] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 21:37:50,218] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 21:37:50,302] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 21:37:50,433] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 21:37:50,458] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 21:37:50,482] INFO Adding UDAF name=histogram from path=internal class=class io.confluent.ksql.function.udaf.map.HistogramUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 21:37:50,518] INFO Adding UDAF name=WindowEnd from path=internal class=class io.confluent.ksql.function.udaf.window.WindowEndKudaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 21:37:50,543] INFO Adding UDAF name=WindowStart from path=internal class=class io.confluent.ksql.function.udaf.window.WindowStartKudaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 21:37:50,671] INFO KafkaJsonDeserializerConfig values: 
	json.fail.unknown.properties = true
	json.key.type = class io.confluent.ksql.rest.server.computation.CommandId
	json.value.type = class java.lang.Object
 (io.confluent.kafka.serializers.KafkaJsonDeserializerConfig:347)
[2019-08-12 21:37:51,350] INFO KafkaJsonDeserializerConfig values: 
	json.fail.unknown.properties = true
	json.key.type = class java.lang.Object
	json.value.type = class io.confluent.ksql.rest.server.computation.Command
 (io.confluent.kafka.serializers.KafkaJsonDeserializerConfig:347)
[2019-08-12 21:37:51,410] INFO KafkaJsonSerializerConfig values: 
	json.indent.output = false
 (io.confluent.kafka.serializers.KafkaJsonSerializerConfig:347)
[2019-08-12 21:37:51,410] INFO KafkaJsonSerializerConfig values: 
	json.indent.output = false
 (io.confluent.kafka.serializers.KafkaJsonSerializerConfig:347)
[2019-08-12 21:37:52,709] INFO DataStax Java driver for Apache Cassandra(R) (com.datastax.oss:java-driver-core) version 4.1.0 (com.datastax.oss.driver.internal.core.DefaultMavenCoordinates:37)
[2019-08-12 21:37:53,563] INFO Using native clock for microsecond precision (com.datastax.oss.driver.internal.core.time.Clock:40)
[2019-08-12 21:37:54,481] INFO Logging initialized @9515ms to org.eclipse.jetty.util.log.Slf4jLog (org.eclipse.jetty.util.log:193)
[2019-08-12 21:37:54,492] INFO Starting server (io.confluent.ksql.rest.server.KsqlServerMain:73)
[2019-08-12 21:37:54,755] INFO Adding listener: http://0.0.0.0:8088 (io.confluent.rest.Application:241)
[2019-08-12 21:37:55,243] INFO jetty-9.4.18.v20190429; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_211-b12 (org.eclipse.jetty.server.Server:370)
[2019-08-12 21:37:55,306] INFO DefaultSessionIdManager workerName=node0 (org.eclipse.jetty.server.session:365)
[2019-08-12 21:37:55,306] INFO No SessionScavenger set, using defaults (org.eclipse.jetty.server.session:370)
[2019-08-12 21:37:55,309] INFO node0 Scavenging every 660000ms (org.eclipse.jetty.server.session:149)
[2019-08-12 21:37:56,198] INFO HV000001: Hibernate Validator 5.1.3.Final (org.hibernate.validator.internal.util.Version:27)
[2019-08-12 21:37:56,395] INFO Started o.e.j.s.ServletContextHandler@764a3e5d{/,null,AVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:855)
[2019-08-12 21:37:56,453] INFO Started o.e.j.s.ServletContextHandler@b30a50d{/ws,null,AVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:855)
[2019-08-12 21:37:56,476] INFO Started NetworkTrafficServerConnector@5aa781f2{HTTP/1.1,[http/1.1]}{0.0.0.0:8088} (org.eclipse.jetty.server.AbstractConnector:292)
[2019-08-12 21:37:56,477] INFO Started @11511ms (org.eclipse.jetty.server.Server:410)
[2019-08-12 21:37:56,478] WARN Creating topic _confluent-ksql-default__command_topic with replication factor of 1 which is less than 2. This is not advisable in a production environment.  (io.confluent.ksql.rest.util.KsqlInternalTopicUtils:75)
[2019-08-12 21:37:56,519] INFO Corrected retention.ms on ksql internal topic. topic:_confluent-ksql-default__command_topic, retention.ms:9223372036854775807 (io.confluent.ksql.rest.util.KsqlInternalTopicUtils:99)
[2019-08-12 21:37:56,576] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:37:56,576] INFO Build logical plan for CREATE STREAM KSQL_COMMANDS (STATEMENT STRING) WITH(VALUE_FORMAT='JSON', KAFKA_TOPIC='_confluent-ksql-default__command_topic');. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 21:37:56,578] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:37:56,599] INFO ProcessingLogConfig values: 
	ksql.logging.processing.rows.include = false
	ksql.logging.processing.stream.auto.create = false
	ksql.logging.processing.stream.name = KSQL_PROCESSING_LOG
	ksql.logging.processing.topic.auto.create = false
	ksql.logging.processing.topic.name = 
	ksql.logging.processing.topic.partitions = 1
	ksql.logging.processing.topic.replication.factor = 1
 (io.confluent.ksql.logging.processing.ProcessingLogConfig:347)
[2019-08-12 21:38:01,878] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:01,885] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:01,886] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:01,886] INFO Build logical plan for CREATE STREAM KSQL_PROCESSING_LOG (LOGGER STRING, LEVEL STRING, `TIME` BIGINT, MESSAGE STRUCT<`type` INTEGER, deserializationError STRUCT<errorMessage STRING, recordB64 STRING, cause ARRAY<STRING>>, recordProcessingError STRUCT<errorMessage STRING, record STRING, cause ARRAY<STRING>>, productionError STRUCT<errorMessage STRING>>) WITH (VALUE_FORMAT='JSON', KAFKA_TOPIC='default_ksql_processing_log');. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 21:38:01,886] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:01,893] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:01,893] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:01,894] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:01,894] INFO Build logical plan for CREATE STREAM PAGEVIEWS (viewtime BIGINT, userid VARCHAR, pageid VARCHAR) WITH (kafka_topic='pageviews', value_format='AVRO');. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 21:38:01,895] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:01,922] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:01,931] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:01,939] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,253] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,254] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,254] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,254] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,254] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,256] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,257] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,257] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,257] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,257] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,258] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,258] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,258] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,291] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,291] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,292] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,292] INFO Build logical plan for CREATE TABLE USER_VIEWS_PER_HOUR WITH (KAFKA_TOPIC='USER_VIEWS_PER_HOUR', PARTITIONS=1, REPLICAS=1) AS SELECT
  PAGEVIEWS.USERID "USERID",
  COUNT(*) "TOTAL"
FROM PAGEVIEWS PAGEVIEWS
WINDOW TUMBLING ( SIZE 1 HOURS ) 
GROUP BY PAGEVIEWS.USERID;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 21:38:02,381] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,393] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,394] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,395] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,395] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,395] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,396] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,396] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,396] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,396] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,397] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,397] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,397] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,397] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,397] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,398] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,398] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,439] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,439] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,439] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,439] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,440] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,440] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,440] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,440] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,441] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,441] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,441] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,441] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,442] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,442] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,443] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,443] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,459] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,459] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,460] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,460] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,460] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,460] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,460] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,461] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,461] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,461] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,462] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,462] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,462] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,462] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,463] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,463] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,508] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,509] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,509] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,509] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,509] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,509] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,510] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,510] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,510] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,510] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,511] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,511] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,511] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,511] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,511] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,512] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,818] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,818] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,819] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,819] INFO Build logical plan for CREATE TABLE FOO WITH (KAFKA_TOPIC='FOO', PARTITIONS=1, REPLICAS=1) AS SELECT
  PAGEVIEWS.PAGEID "PAGEID",
  COUNT(*) "TOTAL"
FROM PAGEVIEWS PAGEVIEWS
WINDOW TUMBLING ( SIZE 1 HOURS ) 
GROUP BY PAGEVIEWS.PAGEID;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 21:38:02,820] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,821] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,821] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,821] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,821] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,822] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,822] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,822] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,822] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,822] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,823] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,823] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,823] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,823] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,823] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,824] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,824] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,831] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,832] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,832] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,832] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,832] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,833] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,833] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,833] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,833] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,833] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,834] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,834] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,834] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,834] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,834] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,835] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,838] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,839] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,839] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,839] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,839] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,839] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,839] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,840] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,840] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,840] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,840] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,841] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,841] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,841] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,841] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,841] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,848] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,849] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,849] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,849] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,849] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,849] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,849] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,850] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,850] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,850] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,850] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,850] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,851] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:02,851] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:02,851] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:02,851] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:02,925] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,926] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,926] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,926] INFO Build logical plan for drop materialized asdf;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 21:38:02,927] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,928] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,929] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,929] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,929] INFO Build logical plan for drop materialized ghjk;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 21:38:02,930] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,930] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,931] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,931] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,931] INFO Build logical plan for drop materialized ppp;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 21:38:02,931] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:38:02,932] INFO Starting query with application id: _confluent-ksql-default_query_CTAS_FOO_1 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 21:38:02,936] INFO Starting query with application id: _confluent-ksql-default_query_CTAS_USER_VIEWS_PER_HOUR_0 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 21:38:02,996] WARN Writing to metrics Kafka topic will be disabled (io.confluent.support.metrics.PhoneHomeConfig:61)
[2019-08-12 21:38:02,997] INFO No customer ID configured -- falling back to id 'anonymous' (io.confluent.support.metrics.BaseSupportConfig:336)
[2019-08-12 21:38:02,998] WARN Enforcing customer ID 'anonymous' (io.confluent.support.metrics.PhoneHomeConfig:66)
[2019-08-12 21:38:03,009] WARN Please note that the version check feature of KSQL is enabled.  With this enabled, this instance is configured to collect and report anonymously the version information to Confluent, Inc. ("Confluent") or its parent, subsidiaries, affiliates or service providers every 24hours.  This Metadata may be transferred to any country in which Confluent maintains facilities.  For a more in depth discussion of how Confluent processes such information, please read our Privacy Policy located at http://www.confluent.io/privacy. By proceeding with `confluent.support.metrics.enable=true`, you agree to all such collection, transfer and use of Version information by Confluent. You can turn the version check  feature off by setting `confluent.support.metrics.enable=false` in the KSQL configuration and restarting the KSQL.  See the Confluent Platform documentation for further information. (io.confluent.ksql.version.metrics.KsqlVersionCheckerAgent:90)
[2019-08-12 21:38:03,009] INFO Waiting until monitored service is ready for metrics collection (io.confluent.support.metrics.BaseMetricsReporter:189)
[2019-08-12 21:38:03,010] INFO Monitored service is now ready (io.confluent.support.metrics.BaseMetricsReporter:200)
[2019-08-12 21:38:03,010] INFO Attempting to collect and submit metrics (io.confluent.support.metrics.BaseMetricsReporter:160)
[2019-08-12 21:38:03,035] INFO Server up and running (io.confluent.ksql.rest.server.KsqlServerMain:75)
[2019-08-12 21:38:03,208] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:03,208] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:03,209] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:03,209] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:03,218] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:03,218] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:03,218] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:03,219] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:03,313] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:03,313] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:03,314] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:03,314] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:03,313] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:03,318] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:03,318] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:03,319] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:03,446] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:03,447] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:03,447] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:03,447] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:03,487] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:03,500] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:03,500] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:03,490] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:03,501] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:03,501] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:03,501] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:03,515] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:03,516] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:03,516] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:03,517] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:03,517] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:03,529] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:03,530] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:03,530] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:03,530] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:03,543] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:03,543] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:03,543] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:03,544] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:04,364] INFO Successfully submitted metrics to Confluent via secure endpoint (io.confluent.support.metrics.submitters.ConfluentSubmitter:143)
[2019-08-12 21:38:05,089] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:05,089] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:05,090] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:05,090] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:38:05,091] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:38:05,092] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:38:05,092] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:38:05,092] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:39:26,752] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:39:26,882] INFO 127.0.0.1 - - [13/Aug/2019:04:39:26 +0000] "POST /ksql HTTP/1.1" 200 4204  410 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:39:30,335] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:39:30,374] INFO 127.0.0.1 - - [13/Aug/2019:04:39:30 +0000] "POST /ksql HTTP/1.1" 200 264  50 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:39:47,140] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:39:47,823] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:39:47,847] INFO Executing statement: create materialized view qqq as select * from USER_VIEWS_PER_HOUR; (io.confluent.ksql.rest.server.computation.CommandRunner:166)
[2019-08-12 21:39:47,848] INFO Executed statement: create materialized view qqq as select * from USER_VIEWS_PER_HOUR; (io.confluent.ksql.rest.server.computation.CommandRunner:173)
[2019-08-12 21:39:47,866] INFO 127.0.0.1 - - [13/Aug/2019:04:39:47 +0000] "POST /ksql HTTP/1.1" 200 276  732 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:39:53,239] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:39:53,267] INFO 127.0.0.1 - - [13/Aug/2019:04:39:53 +0000] "POST /ksql HTTP/1.1" 200 477  37 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:39:53,528] INFO 127.0.0.1 - - [13/Aug/2019:04:39:53 +0000] "POST /query HTTP/1.1" 200 4284  134 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:40:33,744] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:40:33,753] INFO 127.0.0.1 - - [13/Aug/2019:04:40:33 +0000] "POST /ksql HTTP/1.1" 200 500  60 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:40:33,792] INFO 127.0.0.1 - - [13/Aug/2019:04:40:33 +0000] "POST /query HTTP/1.1" 200 0  11 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:40:36,897] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:40:36,906] INFO 127.0.0.1 - - [13/Aug/2019:04:40:36 +0000] "POST /ksql HTTP/1.1" 200 500  17 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:40:36,955] INFO 127.0.0.1 - - [13/Aug/2019:04:40:36 +0000] "POST /query HTTP/1.1" 200 0  11 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:40:39,315] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:40:39,320] INFO 127.0.0.1 - - [13/Aug/2019:04:40:39 +0000] "POST /ksql HTTP/1.1" 200 499  13 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:40:39,374] INFO 127.0.0.1 - - [13/Aug/2019:04:40:39 +0000] "POST /query HTTP/1.1" 200 764  16 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:40:54,566] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:40:54,600] INFO 127.0.0.1 - - [13/Aug/2019:04:40:54 +0000] "POST /ksql HTTP/1.1" 200 498  41 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:40:54,616] INFO 127.0.0.1 - - [13/Aug/2019:04:40:54 +0000] "POST /query HTTP/1.1" 200 0  10 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:40:57,384] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:40:57,390] INFO 127.0.0.1 - - [13/Aug/2019:04:40:57 +0000] "POST /ksql HTTP/1.1" 200 499  14 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:40:57,439] INFO 127.0.0.1 - - [13/Aug/2019:04:40:57 +0000] "POST /query HTTP/1.1" 200 764  16 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:46:39,251] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,253] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:46:39,253] INFO Build logical plan for select * from USER_VIEWS_PER_HOUR;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 21:46:39,259] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:46:39,261] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,261] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,262] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,262] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,262] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,262] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,263] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,263] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,263] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,264] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,264] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,264] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,264] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,265] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,265] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,265] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,267] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,267] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,267] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,268] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,268] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,268] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,269] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,269] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,269] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,269] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,270] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,270] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,271] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,271] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,271] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,272] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,341] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:46:39,341] INFO Build logical plan for select * from USER_VIEWS_PER_HOUR;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 21:46:39,342] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:46:39,343] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,343] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,343] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,344] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,344] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,344] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,345] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,345] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,345] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,345] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,346] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,346] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,346] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,346] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,347] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,347] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,347] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,348] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,348] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,348] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,348] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,349] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,349] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,349] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,349] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,349] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,350] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,350] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,350] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,350] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,350] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,350] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,455] INFO 127.0.0.1 - - [13/Aug/2019:04:46:39 +0000] "POST /ksql HTTP/1.1" 200 2123  234 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:46:39,490] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:46:39,496] INFO Build logical plan for select * from USER_VIEWS_PER_HOUR;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 21:46:39,497] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:46:39,497] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,498] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,498] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,498] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,499] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,499] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,499] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,499] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,500] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,500] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,500] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,500] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,501] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,501] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,501] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,501] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,502] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,502] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,502] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,502] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,503] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,503] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,503] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,503] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,504] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,504] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,504] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,504] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,505] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:39,506] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:39,507] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:39,507] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:39,623] INFO Starting query with application id: _confluent-ksql-default_transient_6639898571105556639_1565671599526 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 21:46:39,632] INFO Streaming query 'select * from USER_VIEWS_PER_HOUR;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 21:46:41,605] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:41,606] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:41,607] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:41,607] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:41,635] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:41,636] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:41,636] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:41,636] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:41,877] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:46:41,878] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:46:41,878] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:46:41,878] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:46:48,046] WARN Query terminated due to exception:org.eclipse.jetty.io.EofException (io.confluent.ksql.rest.server.resources.streaming.QueryStreamWriter:87)
[2019-08-12 21:46:48,208] INFO 127.0.0.1 - - [13/Aug/2019:04:46:39 +0000] "POST /query HTTP/1.1" 200 4111  8733 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:47:58,174] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,177] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:47:58,178] INFO Build logical plan for select * from USER_VIEWS_PER_HOUR;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 21:47:58,181] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:47:58,183] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,183] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,184] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,184] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,184] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,185] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,185] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,185] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,186] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,186] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,186] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,186] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,186] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,187] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,187] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,187] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,188] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,188] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,188] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,188] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,188] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,189] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,189] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,189] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,189] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,190] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,190] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,190] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,191] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,191] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,191] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,191] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,221] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:47:58,221] INFO Build logical plan for select * from USER_VIEWS_PER_HOUR;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 21:47:58,222] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:47:58,222] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,222] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,222] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,223] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,223] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,223] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,223] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,223] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,223] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,224] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,224] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,224] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,224] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,225] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,225] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,225] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,225] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,226] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,226] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,226] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,226] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,227] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,227] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,227] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,228] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,228] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,228] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,228] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,229] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,229] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,229] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,230] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,347] INFO 127.0.0.1 - - [13/Aug/2019:04:47:58 +0000] "POST /ksql HTTP/1.1" 200 2123  183 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:47:58,365] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:47:58,366] INFO Build logical plan for select * from USER_VIEWS_PER_HOUR;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 21:47:58,367] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:47:58,367] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,367] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,367] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,368] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,368] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,368] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,368] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,369] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,370] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,370] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,370] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,370] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,371] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,371] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,371] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,371] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,371] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,371] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,372] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,372] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,372] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,372] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,373] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,373] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,373] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,373] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,374] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,374] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,374] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:58,374] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:58,375] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:58,375] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:58,451] INFO Starting query with application id: _confluent-ksql-default_transient_6585734398002577035_1565671678385 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 21:47:58,453] INFO Streaming query 'select * from USER_VIEWS_PER_HOUR;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 21:47:59,486] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:59,488] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:59,489] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:59,490] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:47:59,518] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:47:59,519] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:47:59,519] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:47:59,520] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:00,570] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:00,571] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:00,571] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:00,571] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:04,676] WARN Query terminated due to exception:org.eclipse.jetty.io.EofException (io.confluent.ksql.rest.server.resources.streaming.QueryStreamWriter:87)
[2019-08-12 21:48:04,762] INFO 127.0.0.1 - - [13/Aug/2019:04:47:58 +0000] "POST /query HTTP/1.1" 200 2742  6403 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:48:12,141] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,143] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:48:12,144] INFO Build logical plan for select * from USER_VIEWS_PER_HOUR;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 21:48:12,146] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:48:12,147] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,147] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,148] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,148] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,148] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,149] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,149] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,149] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,150] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,150] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,150] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,150] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,152] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,153] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,153] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,154] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,155] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,156] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,156] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,157] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,157] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,157] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,158] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,158] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,158] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,159] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,159] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,159] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,159] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,160] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,160] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,160] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,190] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:48:12,190] INFO Build logical plan for select * from USER_VIEWS_PER_HOUR;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 21:48:12,191] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:48:12,192] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,192] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,192] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,192] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,192] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,193] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,193] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,193] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,193] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,193] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,193] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,194] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,194] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,194] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,194] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,195] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,195] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,195] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,195] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,195] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,196] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,196] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,196] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,196] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,196] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,196] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,197] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,197] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,197] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,197] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,197] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,197] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,289] INFO 127.0.0.1 - - [13/Aug/2019:04:48:12 +0000] "POST /ksql HTTP/1.1" 200 2123  153 (io.confluent.rest-utils.requests:62)
[2019-08-12 21:48:12,315] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:48:12,316] INFO Build logical plan for select * from USER_VIEWS_PER_HOUR;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 21:48:12,317] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 21:48:12,317] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,318] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,318] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,318] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,318] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,318] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,318] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,319] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,319] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,319] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,319] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,320] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,320] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,320] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,320] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,320] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,321] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,321] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,321] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,323] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,323] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,323] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,324] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,324] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,324] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,325] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,325] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,325] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,325] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:12,326] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:12,326] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:12,326] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:12,404] INFO Starting query with application id: _confluent-ksql-default_transient_3659663998961592080_1565671692338 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 21:48:12,405] INFO Streaming query 'select * from USER_VIEWS_PER_HOUR;' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 21:48:13,737] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:13,738] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:13,738] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:13,739] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:13,760] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:13,760] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:13,760] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:13,761] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:14,505] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 21:48:14,506] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 21:48:14,506] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 21:48:14,506] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 21:48:20,670] WARN Query terminated due to exception:org.eclipse.jetty.io.EofException (io.confluent.ksql.rest.server.resources.streaming.QueryStreamWriter:87)
[2019-08-12 21:48:20,789] INFO 127.0.0.1 - - [13/Aug/2019:04:48:12 +0000] "POST /query HTTP/1.1" 200 3959  8479 (io.confluent.rest-utils.requests:62)
[2019-08-12 22:19:04,803] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:19:05,429] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:19:05,433] INFO Executing statement: CREATE MATERIALIZED VIEW MAT_USERS AS SELECT * FROM USER_VIEWS_PER_HOUR; (io.confluent.ksql.rest.server.computation.CommandRunner:166)
[2019-08-12 22:19:05,433] INFO Executed statement: CREATE MATERIALIZED VIEW MAT_USERS AS SELECT * FROM USER_VIEWS_PER_HOUR; (io.confluent.ksql.rest.server.computation.CommandRunner:173)
[2019-08-12 22:19:05,439] INFO 127.0.0.1 - - [13/Aug/2019:05:19:04 +0000] "POST /ksql HTTP/1.1" 200 294  674 (io.confluent.rest-utils.requests:62)
[2019-08-12 22:19:44,534] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:19:44,577] INFO 127.0.0.1 - - [13/Aug/2019:05:19:44 +0000] "POST /ksql HTTP/1.1" 200 483  64 (io.confluent.rest-utils.requests:62)
[2019-08-12 22:19:44,711] INFO 127.0.0.1 - - [13/Aug/2019:05:19:44 +0000] "POST /query HTTP/1.1" 200 8640  53 (io.confluent.rest-utils.requests:62)
[2019-08-12 22:20:05,282] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:20:05,289] INFO 127.0.0.1 - - [13/Aug/2019:05:20:05 +0000] "POST /ksql HTTP/1.1" 200 505  14 (io.confluent.rest-utils.requests:62)
[2019-08-12 22:20:05,387] INFO 127.0.0.1 - - [13/Aug/2019:05:20:05 +0000] "POST /query HTTP/1.1" 200 960  35 (io.confluent.rest-utils.requests:62)
[2019-08-12 22:21:00,348] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,349] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 22:21:00,350] INFO Build logical plan for select * from user_views_per_hour where USERID='User_4';. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 22:21:00,351] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 22:21:00,352] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,352] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,353] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,353] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,353] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,354] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,354] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,354] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,354] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,354] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,354] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,355] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,355] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,355] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,355] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,355] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,356] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,356] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,356] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,356] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,356] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,356] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,357] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,357] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,357] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,357] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,358] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,358] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,358] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,358] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,358] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,359] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,530] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 22:21:00,530] INFO Build logical plan for select * from user_views_per_hour where USERID='User_4';. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 22:21:00,532] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 22:21:00,533] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,543] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,545] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,545] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,549] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,554] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,555] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,562] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,570] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,574] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,579] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,580] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,581] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,581] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,581] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,581] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,581] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,582] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,585] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,585] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,586] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,588] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,589] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,589] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,589] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,590] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,590] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,590] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,591] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,591] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,591] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,591] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,748] INFO 127.0.0.1 - - [13/Aug/2019:05:21:00 +0000] "POST /ksql HTTP/1.1" 200 2543  469 (io.confluent.rest-utils.requests:62)
[2019-08-12 22:21:00,780] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 22:21:00,781] INFO Build logical plan for select * from user_views_per_hour where USERID='User_4';. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 22:21:00,782] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 22:21:00,782] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,783] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,783] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,783] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,784] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,784] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,785] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,785] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,786] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,786] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,787] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,788] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,789] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,789] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,790] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,790] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,791] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,791] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,791] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,791] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,791] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,792] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,792] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,792] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,792] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,792] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,792] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,793] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:00,793] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:00,793] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:00,793] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:00,793] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:01,042] INFO Starting query with application id: _confluent-ksql-default_transient_884172518601213240_1565673660829 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 22:21:01,048] INFO Streaming query 'select * from user_views_per_hour where USERID='User_4';' (io.confluent.ksql.rest.server.resources.streaming.StreamedQueryResource:209)
[2019-08-12 22:21:02,526] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:02,532] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:02,533] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:02,534] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:02,614] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:02,615] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:02,615] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:02,615] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:03,318] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 22:21:03,318] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 22:21:03,319] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 22:21:03,319] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:13,631] WARN Query terminated due to exception:org.eclipse.jetty.io.EofException (io.confluent.ksql.rest.server.resources.streaming.QueryStreamWriter:87)
[2019-08-12 22:21:13,931] INFO 127.0.0.1 - - [13/Aug/2019:05:21:00 +0000] "POST /query HTTP/1.1" 200 772  13162 (io.confluent.rest-utils.requests:62)
[2019-08-12 22:21:28,789] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:28,996] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 22:21:29,013] INFO Executing statement: drop materialized MAT_USERS; (io.confluent.ksql.rest.server.computation.CommandRunner:166)
[2019-08-12 22:21:29,013] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 22:21:29,014] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 22:21:29,014] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 22:21:29,014] INFO Build logical plan for drop materialized MAT_USERS;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 22:21:29,014] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 22:21:29,015] INFO Executed statement: drop materialized MAT_USERS; (io.confluent.ksql.rest.server.computation.CommandRunner:173)
[2019-08-12 22:21:29,026] INFO 127.0.0.1 - - [13/Aug/2019:05:21:28 +0000] "POST /ksql HTTP/1.1" 200 270  248 (io.confluent.rest-utils.requests:62)
[2019-08-12 23:23:41,568] INFO Stopped NetworkTrafficServerConnector@5aa781f2{HTTP/1.1,[http/1.1]}{0.0.0.0:8088} (org.eclipse.jetty.server.AbstractConnector:341)
[2019-08-12 23:23:41,569] INFO node0 Stopped scavenging (org.eclipse.jetty.server.session:167)
[2019-08-12 23:23:41,572] INFO Stopped o.e.j.s.ServletContextHandler@b30a50d{/ws,null,UNAVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:1045)
[2019-08-12 23:23:41,577] INFO Stopped o.e.j.s.ServletContextHandler@764a3e5d{/,null,UNAVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:1045)
[2019-08-12 23:23:41,579] INFO Server shutting down (io.confluent.ksql.rest.server.KsqlServerMain:78)
[2019-08-12 23:23:50,060] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:23:50,082] INFO KsqlRestConfig values: 
	access.control.allow.headers = 
	access.control.allow.methods = 
	access.control.allow.origin = 
	authentication.method = NONE
	authentication.realm = 
	authentication.roles = [*]
	authentication.skip.paths = []
	compression.enable = true
	debug = false
	idle.timeout.ms = 30000
	ksql.server.command.response.timeout.ms = 5000
	ksql.server.install.dir = /Users/zlim/desktop/github/ksql
	ksql.server.preconditions = []
	ksql.server.websockets.num.threads = 5
	listeners = [http://0.0.0.0:8088]
	metric.reporters = []
	metrics.jmx.prefix = rest-utils
	metrics.num.samples = 2
	metrics.sample.window.ms = 30000
	metrics.tag.map = []
	port = 8080
	query.stream.disconnect.check = 1000
	request.logger.name = io.confluent.rest-utils.requests
	resource.extension.classes = []
	response.mediatype.default = application/json
	response.mediatype.preferred = [application/json]
	rest.servlet.initializor.classes = []
	shutdown.graceful.ms = 1000
	ssl.cipher.suites = []
	ssl.client.auth = false
	ssl.client.authentication = NONE
	ssl.enabled.protocols = []
	ssl.endpoint.identification.algorithm = null
	ssl.key.password = [hidden]
	ssl.keymanager.algorithm = 
	ssl.keystore.location = 
	ssl.keystore.password = [hidden]
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = 
	ssl.trustmanager.algorithm = 
	ssl.truststore.location = 
	ssl.truststore.password = [hidden]
	ssl.truststore.type = JKS
	websocket.path.prefix = /ws
	websocket.servlet.initializor.classes = []
 (io.confluent.ksql.rest.server.KsqlRestConfig:347)
[2019-08-12 23:23:50,119] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:23:50,127] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:23:50,129] INFO ProcessingLogConfig values: 
	ksql.logging.processing.rows.include = false
	ksql.logging.processing.stream.auto.create = true
	ksql.logging.processing.stream.name = KSQL_PROCESSING_LOG
	ksql.logging.processing.topic.auto.create = true
	ksql.logging.processing.topic.name = 
	ksql.logging.processing.topic.partitions = 1
	ksql.logging.processing.topic.replication.factor = 1
 (io.confluent.ksql.logging.processing.ProcessingLogConfig:347)
[2019-08-12 23:23:50,288] INFO Setting UDF blacklisted classes to:  (io.confluent.ksql.function.Blacklist:70)
[2019-08-12 23:23:50,518] INFO Adding UDF name='ComplexFunction' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:50,761] INFO Adding function ComplexFunction for method public java.lang.Object io.confluent.ksql.function.UdfLoaderTest$ComplexUdf.foo(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:50,903] INFO Adding UDF name='ConfigurableUdf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:50,913] INFO Adding function ConfigurableUdf for method public int io.confluent.ksql.function.UdfLoaderTest$ConfigurableUdf.foo(int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:50,914] INFO Adding UDF name='SomeFunction' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:50,964] INFO Adding function SomeFunction for method public int io.confluent.ksql.function.UdfLoaderTest$SomeFunctionUdf.foo(java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:50,969] WARN Ignoring method annotated with @Udf but missing @UdfDescription. method='something' from path=internal (io.confluent.ksql.function.UdfLoader:209)
[2019-08-12 23:23:50,970] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:50,986] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffIntString(int,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:50,987] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,005] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongString(long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,006] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,017] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongLongString(long,long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,017] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,027] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffLongVarargs(long[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,028] INFO Adding UDF name='test_udf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,039] INFO Adding function test_udf for method public java.lang.String io.confluent.ksql.function.udf.TestUdf.doStuffStruct(org.apache.kafka.connect.data.Struct) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,040] INFO Adding UDF name='datetostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,087] INFO Adding function datetostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.DateToString.dateToString(int,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,088] INFO Adding UDF name='stringtodate' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,098] INFO Adding function stringtodate for method public int io.confluent.ksql.function.udf.datetime.StringToDate.stringToDate(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,100] INFO Adding UDF name='stringtotimestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,111] INFO Adding function stringtotimestamp for method public long io.confluent.ksql.function.udf.datetime.StringToTimestamp.stringToTimestamp(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,111] INFO Adding UDF name='stringtotimestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,119] INFO Adding function stringtotimestamp for method public long io.confluent.ksql.function.udf.datetime.StringToTimestamp.stringToTimestamp(java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,121] INFO Adding UDF name='timestamptostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,137] INFO Adding function timestamptostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.TimestampToString.timestampToString(long,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,138] INFO Adding UDF name='timestamptostring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,172] INFO Adding function timestamptostring for method public java.lang.String io.confluent.ksql.function.udf.datetime.TimestampToString.timestampToString(long,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,176] INFO Adding UDF name='unix_date' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,179] INFO Adding function unix_date for method public int io.confluent.ksql.function.udf.datetime.UnixDate.unixDate() (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,181] INFO Adding UDF name='unix_timestamp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,184] INFO Adding function unix_timestamp for method public long io.confluent.ksql.function.udf.datetime.UnixTimestamp.unixTimestamp() (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,185] INFO Adding UDF name='geo_distance' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,204] INFO Adding function geo_distance for method public java.lang.Double io.confluent.ksql.function.udf.geo.GeoDistance.geoDistance(double,double,double,double,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,206] INFO Adding UDF name='geo_distance' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,218] INFO Adding function geo_distance for method public java.lang.Double io.confluent.ksql.function.udf.geo.GeoDistance.geoDistance(double,double,double,double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,221] INFO Adding UDF name='AS_ARRAY' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,237] INFO Adding function AS_ARRAY for method public final java.util.List io.confluent.ksql.function.udf.list.AsArray.asArray(java.lang.Object[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,245] INFO Adding UDF name='slice' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,296] INFO Adding function slice for method public java.util.List io.confluent.ksql.function.udf.list.Slice.slice(java.util.List,java.lang.Integer,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,298] INFO Adding UDF name='AS_MAP' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,313] INFO Adding function AS_MAP for method public final java.util.Map io.confluent.ksql.function.udf.map.AsMap.asMap(java.util.List,java.util.List) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,320] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,334] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,335] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,345] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,346] INFO Adding UDF name='exp' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,356] INFO Adding function exp for method public java.lang.Double io.confluent.ksql.function.udf.math.Exp.exp(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,358] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,368] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,368] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,378] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,379] INFO Adding UDF name='ln' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,393] INFO Adding function ln for method public java.lang.Double io.confluent.ksql.function.udf.math.Ln.ln(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,394] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,405] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Double) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,405] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,448] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,448] INFO Adding UDF name='sqrt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,466] INFO Adding function sqrt for method public java.lang.Double io.confluent.ksql.function.udf.math.Sqrt.sqrt(java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,467] INFO Adding UDF name='elt' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,489] INFO Adding function elt for method public java.lang.String io.confluent.ksql.function.udf.string.Elt.elt(int,java.lang.String[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,517] INFO Adding UDF name='field' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,532] INFO Adding function field for method public int io.confluent.ksql.function.udf.string.Field.field(java.lang.String,java.lang.String[]) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,534] INFO Adding UDF name='mask_keep_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,558] INFO Adding function mask_keep_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepLeftKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,559] INFO Adding UDF name='mask_keep_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,572] INFO Adding function mask_keep_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepLeftKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,573] INFO Adding UDF name='mask_keep_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,588] INFO Adding function mask_keep_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepRightKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,589] INFO Adding UDF name='mask_keep_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,607] INFO Adding function mask_keep_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKeepRightKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,608] INFO Adding UDF name='mask' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,641] INFO Adding function mask for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKudf.mask(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,641] INFO Adding UDF name='mask' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,654] INFO Adding function mask for method public java.lang.String io.confluent.ksql.function.udf.string.MaskKudf.mask(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,655] INFO Adding UDF name='mask_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,672] INFO Adding function mask_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskLeftKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,673] INFO Adding UDF name='mask_left' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,688] INFO Adding function mask_left for method public java.lang.String io.confluent.ksql.function.udf.string.MaskLeftKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,689] INFO Adding UDF name='mask_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,713] INFO Adding function mask_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskRightKudf.mask(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,713] INFO Adding UDF name='mask_right' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,729] INFO Adding function mask_right for method public java.lang.String io.confluent.ksql.function.udf.string.MaskRightKudf.mask(java.lang.String,int) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,731] INFO Adding UDF name='split' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,746] INFO Adding function split for method public java.util.List io.confluent.ksql.function.udf.string.SplitKudf.split(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,749] INFO Adding UDF name='substring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,784] INFO Adding function substring for method public java.lang.String io.confluent.ksql.function.udf.string.Substring.substring(java.lang.String,java.lang.Integer,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,785] INFO Adding UDF name='substring' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,809] INFO Adding function substring for method public java.lang.String io.confluent.ksql.function.udf.string.Substring.substring(java.lang.String,java.lang.Integer) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,810] INFO Adding UDF name='url_decode_param' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,826] INFO Adding function url_decode_param for method public java.lang.String io.confluent.ksql.function.udf.url.UrlDecodeParamKudf.decodeParam(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,827] INFO Adding UDF name='url_encode_param' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,845] INFO Adding function url_encode_param for method public java.lang.String io.confluent.ksql.function.udf.url.UrlEncodeParamKudf.encodeParam(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,847] INFO Adding UDF name='url_extract_fragment' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,861] INFO Adding function url_extract_fragment for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractFragmentKudf.extractFragment(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,863] INFO Adding UDF name='url_extract_host' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,886] INFO Adding function url_extract_host for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractHostKudf.extractHost(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,888] INFO Adding UDF name='url_extract_parameter' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,941] INFO Adding function url_extract_parameter for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractParameterKudf.extractParam(java.lang.String,java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:51,943] INFO Adding UDF name='url_extract_path' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:51,999] INFO Adding function url_extract_path for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractPathKudf.extractPath(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:52,000] INFO Adding UDF name='url_extract_port' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:52,012] INFO Adding function url_extract_port for method public java.lang.Integer io.confluent.ksql.function.udf.url.UrlExtractPortKudf.extractPort(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:52,013] INFO Adding UDF name='url_extract_protocol' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:52,029] INFO Adding function url_extract_protocol for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractProtocolKudf.extractProtocol(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:52,032] INFO Adding UDF name='url_extract_query' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:52,044] INFO Adding function url_extract_query for method public java.lang.String io.confluent.ksql.function.udf.url.UrlExtractQueryKudf.extractQuery(java.lang.String) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:52,045] INFO Adding UDF name='E2EConfigurableUdf' from path=internal (io.confluent.ksql.function.UdfLoader:214)
[2019-08-12 23:23:52,061] INFO Adding function E2EConfigurableUdf for method public long io.confluent.ksql.integration.EndToEndIntegrationTest$ConfigurableUdf.foo(long) (io.confluent.ksql.function.UdfLoader:248)
[2019-08-12 23:23:52,082] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 23:23:52,247] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 23:23:52,274] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 23:23:52,297] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 23:23:52,333] INFO Adding UDAF name=test_udaf from path=internal class=class io.confluent.ksql.function.udaf.TestUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 23:23:52,391] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 23:23:52,420] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 23:23:52,456] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 23:23:52,475] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 23:23:52,500] INFO Adding UDAF name=collect_list from path=internal class=class io.confluent.ksql.function.udaf.array.CollectListUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 23:23:52,544] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 23:23:52,581] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 23:23:52,596] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 23:23:52,613] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 23:23:52,628] INFO Adding UDAF name=collect_set from path=internal class=class io.confluent.ksql.function.udaf.array.CollectSetUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 23:23:52,691] INFO Adding UDAF name=histogram from path=internal class=class io.confluent.ksql.function.udaf.map.HistogramUdaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 23:23:52,790] INFO Adding UDAF name=WindowEnd from path=internal class=class io.confluent.ksql.function.udaf.window.WindowEndKudaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 23:23:52,823] INFO Adding UDAF name=WindowStart from path=internal class=class io.confluent.ksql.function.udaf.window.WindowStartKudaf (io.confluent.ksql.function.UdfLoader:169)
[2019-08-12 23:23:52,896] INFO KafkaJsonDeserializerConfig values: 
	json.fail.unknown.properties = true
	json.key.type = class io.confluent.ksql.rest.server.computation.CommandId
	json.value.type = class java.lang.Object
 (io.confluent.kafka.serializers.KafkaJsonDeserializerConfig:347)
[2019-08-12 23:23:53,279] INFO KafkaJsonDeserializerConfig values: 
	json.fail.unknown.properties = true
	json.key.type = class java.lang.Object
	json.value.type = class io.confluent.ksql.rest.server.computation.Command
 (io.confluent.kafka.serializers.KafkaJsonDeserializerConfig:347)
[2019-08-12 23:23:53,349] INFO KafkaJsonSerializerConfig values: 
	json.indent.output = false
 (io.confluent.kafka.serializers.KafkaJsonSerializerConfig:347)
[2019-08-12 23:23:53,349] INFO KafkaJsonSerializerConfig values: 
	json.indent.output = false
 (io.confluent.kafka.serializers.KafkaJsonSerializerConfig:347)
[2019-08-12 23:23:55,315] INFO DataStax Java driver for Apache Cassandra(R) (com.datastax.oss:java-driver-core) version 4.1.0 (com.datastax.oss.driver.internal.core.DefaultMavenCoordinates:37)
[2019-08-12 23:23:55,833] INFO Using native clock for microsecond precision (com.datastax.oss.driver.internal.core.time.Clock:40)
[2019-08-12 23:23:56,545] INFO Logging initialized @7719ms to org.eclipse.jetty.util.log.Slf4jLog (org.eclipse.jetty.util.log:193)
[2019-08-12 23:23:56,549] INFO Starting server (io.confluent.ksql.rest.server.KsqlServerMain:73)
[2019-08-12 23:23:56,756] INFO Adding listener: http://0.0.0.0:8088 (io.confluent.rest.Application:241)
[2019-08-12 23:23:57,017] INFO jetty-9.4.18.v20190429; built: 2019-04-29T20:42:08.989Z; git: e1bc35120a6617ee3df052294e433f3a25ce7097; jvm 1.8.0_211-b12 (org.eclipse.jetty.server.Server:370)
[2019-08-12 23:23:57,065] INFO DefaultSessionIdManager workerName=node0 (org.eclipse.jetty.server.session:365)
[2019-08-12 23:23:57,065] INFO No SessionScavenger set, using defaults (org.eclipse.jetty.server.session:370)
[2019-08-12 23:23:57,067] INFO node0 Scavenging every 660000ms (org.eclipse.jetty.server.session:149)
[2019-08-12 23:23:57,697] INFO HV000001: Hibernate Validator 5.1.3.Final (org.hibernate.validator.internal.util.Version:27)
[2019-08-12 23:23:57,834] INFO Started o.e.j.s.ServletContextHandler@5d124d29{/,null,AVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:855)
[2019-08-12 23:23:57,876] INFO Started o.e.j.s.ServletContextHandler@423ed3b5{/ws,null,AVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:855)
[2019-08-12 23:23:57,897] INFO Started NetworkTrafficServerConnector@6a3fbcb1{HTTP/1.1,[http/1.1]}{0.0.0.0:8088} (org.eclipse.jetty.server.AbstractConnector:292)
[2019-08-12 23:23:57,897] INFO Started @9071ms (org.eclipse.jetty.server.Server:410)
[2019-08-12 23:23:57,899] WARN Creating topic _confluent-ksql-default__command_topic with replication factor of 1 which is less than 2. This is not advisable in a production environment.  (io.confluent.ksql.rest.util.KsqlInternalTopicUtils:75)
[2019-08-12 23:23:57,931] INFO Corrected retention.ms on ksql internal topic. topic:_confluent-ksql-default__command_topic, retention.ms:9223372036854775807 (io.confluent.ksql.rest.util.KsqlInternalTopicUtils:99)
[2019-08-12 23:23:57,995] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:23:57,995] INFO Build logical plan for CREATE STREAM KSQL_COMMANDS (STATEMENT STRING) WITH(VALUE_FORMAT='JSON', KAFKA_TOPIC='_confluent-ksql-default__command_topic');. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 23:23:57,996] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:23:58,016] INFO ProcessingLogConfig values: 
	ksql.logging.processing.rows.include = false
	ksql.logging.processing.stream.auto.create = false
	ksql.logging.processing.stream.name = KSQL_PROCESSING_LOG
	ksql.logging.processing.topic.auto.create = false
	ksql.logging.processing.topic.name = 
	ksql.logging.processing.topic.partitions = 1
	ksql.logging.processing.topic.replication.factor = 1
 (io.confluent.ksql.logging.processing.ProcessingLogConfig:347)
[2019-08-12 23:24:03,324] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:03,329] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:03,330] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:03,330] INFO Build logical plan for CREATE STREAM KSQL_PROCESSING_LOG (LOGGER STRING, LEVEL STRING, `TIME` BIGINT, MESSAGE STRUCT<`type` INTEGER, deserializationError STRUCT<errorMessage STRING, recordB64 STRING, cause ARRAY<STRING>>, recordProcessingError STRUCT<errorMessage STRING, record STRING, cause ARRAY<STRING>>, productionError STRUCT<errorMessage STRING>>) WITH (VALUE_FORMAT='JSON', KAFKA_TOPIC='default_ksql_processing_log');. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 23:24:03,331] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:03,337] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:03,337] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:03,338] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:03,338] INFO Build logical plan for CREATE STREAM PAGEVIEWS (viewtime BIGINT, userid VARCHAR, pageid VARCHAR) WITH (kafka_topic='pageviews', value_format='AVRO');. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 23:24:03,339] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:03,368] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:03,377] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:03,384] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:03,626] INFO 127.0.0.1 - - [13/Aug/2019:06:24:03 +0000] "POST /ksql HTTP/1.1" 503 113  168 (io.confluent.rest-utils.requests:62)
[2019-08-12 23:24:03,808] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:03,810] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:03,810] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:03,810] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:03,811] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:03,814] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:03,814] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:03,814] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:03,815] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:03,816] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:03,816] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:03,816] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:03,817] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:03,858] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:03,859] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:03,862] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:03,862] INFO Build logical plan for CREATE TABLE USER_VIEWS_PER_HOUR WITH (KAFKA_TOPIC='USER_VIEWS_PER_HOUR', PARTITIONS=1, REPLICAS=1) AS SELECT
  PAGEVIEWS.USERID "USERID",
  COUNT(*) "TOTAL"
FROM PAGEVIEWS PAGEVIEWS
WINDOW TUMBLING ( SIZE 1 HOURS ) 
GROUP BY PAGEVIEWS.USERID;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 23:24:03,933] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:03,943] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:03,944] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:03,944] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:03,944] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:03,944] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:03,944] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:03,944] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:03,945] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:03,945] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:03,945] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:03,945] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:03,945] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:03,945] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:03,946] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:03,946] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:03,946] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:03,986] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:03,987] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:03,987] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:03,987] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:03,987] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:03,988] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:03,988] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:03,988] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:03,988] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:03,988] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:03,989] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:03,989] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:03,989] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:03,989] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:03,989] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:03,990] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,006] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,007] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,007] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,007] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,007] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,007] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,008] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,008] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,008] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,008] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,009] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,009] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,009] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,009] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,010] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,010] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,054] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,054] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,054] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,055] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,055] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,055] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,055] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,056] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,056] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,056] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,056] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,056] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,057] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,057] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,057] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,057] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,396] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,397] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,397] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,398] INFO Build logical plan for CREATE TABLE FOO WITH (KAFKA_TOPIC='FOO', PARTITIONS=1, REPLICAS=1) AS SELECT
  PAGEVIEWS.PAGEID "PAGEID",
  COUNT(*) "TOTAL"
FROM PAGEVIEWS PAGEVIEWS
WINDOW TUMBLING ( SIZE 1 HOURS ) 
GROUP BY PAGEVIEWS.PAGEID;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 23:24:04,399] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,399] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,400] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,400] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,400] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,400] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,400] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,400] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,400] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,401] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,401] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,401] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,401] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,402] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,402] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,402] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,402] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,410] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,410] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,411] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,411] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,412] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,412] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,412] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,412] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,412] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,413] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,413] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,413] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,413] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,413] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,413] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,414] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,417] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,418] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,418] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,418] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,418] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,418] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,419] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,419] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,419] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,419] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,419] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,419] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,420] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,420] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,420] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,420] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,427] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,427] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,427] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,427] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,428] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,428] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,428] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,428] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,428] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,428] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,428] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,429] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,429] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,429] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,429] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,430] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,506] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,506] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,507] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,507] INFO Build logical plan for drop materialized asdf;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 23:24:04,507] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,509] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,509] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,509] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,510] INFO Build logical plan for drop materialized ghjk;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 23:24:04,512] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,512] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,513] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,514] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,514] INFO Build logical plan for drop materialized ppp;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 23:24:04,514] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,515] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,515] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,516] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,516] INFO Build logical plan for drop materialized MAT_USERS;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 23:24:04,516] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:04,517] INFO Starting query with application id: _confluent-ksql-default_query_CTAS_FOO_1 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 23:24:04,523] INFO Starting query with application id: _confluent-ksql-default_query_CTAS_USER_VIEWS_PER_HOUR_0 (io.confluent.ksql.util.QueryMetadata:162)
[2019-08-12 23:24:04,609] WARN Writing to metrics Kafka topic will be disabled (io.confluent.support.metrics.PhoneHomeConfig:61)
[2019-08-12 23:24:04,609] INFO No customer ID configured -- falling back to id 'anonymous' (io.confluent.support.metrics.BaseSupportConfig:336)
[2019-08-12 23:24:04,610] WARN Enforcing customer ID 'anonymous' (io.confluent.support.metrics.PhoneHomeConfig:66)
[2019-08-12 23:24:04,618] INFO Waiting until monitored service is ready for metrics collection (io.confluent.support.metrics.BaseMetricsReporter:189)
[2019-08-12 23:24:04,618] INFO Monitored service is now ready (io.confluent.support.metrics.BaseMetricsReporter:200)
[2019-08-12 23:24:04,618] INFO Attempting to collect and submit metrics (io.confluent.support.metrics.BaseMetricsReporter:160)
[2019-08-12 23:24:04,618] WARN Please note that the version check feature of KSQL is enabled.  With this enabled, this instance is configured to collect and report anonymously the version information to Confluent, Inc. ("Confluent") or its parent, subsidiaries, affiliates or service providers every 24hours.  This Metadata may be transferred to any country in which Confluent maintains facilities.  For a more in depth discussion of how Confluent processes such information, please read our Privacy Policy located at http://www.confluent.io/privacy. By proceeding with `confluent.support.metrics.enable=true`, you agree to all such collection, transfer and use of Version information by Confluent. You can turn the version check  feature off by setting `confluent.support.metrics.enable=false` in the KSQL configuration and restarting the KSQL.  See the Confluent Platform documentation for further information. (io.confluent.ksql.version.metrics.KsqlVersionCheckerAgent:90)
[2019-08-12 23:24:04,619] INFO Server up and running (io.confluent.ksql.rest.server.KsqlServerMain:75)
[2019-08-12 23:24:04,715] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,716] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,720] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,722] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,762] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,762] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,763] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,763] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,845] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,845] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,846] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,846] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:04,845] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:04,849] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:04,849] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:04,850] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:05,038] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:05,038] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:05,038] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:05,038] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:05,043] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:05,043] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:05,043] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:05,044] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:05,057] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:05,058] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:05,058] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:05,058] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:05,071] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:05,071] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:05,071] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:05,072] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:05,087] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:05,087] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:05,088] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:05,088] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:05,091] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:05,092] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:05,092] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:05,092] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:05,606] INFO Successfully submitted metrics to Confluent via secure endpoint (io.confluent.support.metrics.submitters.ConfluentSubmitter:143)
[2019-08-12 23:24:06,661] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:06,661] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:06,662] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:06,662] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:07,105] INFO AvroConverterConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.connect.avro.AvroConverterConfig:179)
[2019-08-12 23:24:07,105] INFO KafkaAvroSerializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroSerializerConfig:179)
[2019-08-12 23:24:07,106] INFO KafkaAvroDeserializerConfig values: 
	bearer.auth.token = [hidden]
	schema.registry.url = [http://localhost:8081]
	basic.auth.user.info = [hidden]
	auto.register.schemas = true
	max.schemas.per.subject = 1000
	basic.auth.credentials.source = URL
	schema.registry.basic.auth.user.info = [hidden]
	bearer.auth.credentials.source = STATIC_TOKEN
	specific.avro.reader = false
	value.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
	key.subject.name.strategy = class io.confluent.kafka.serializers.subject.TopicNameStrategy
 (io.confluent.kafka.serializers.KafkaAvroDeserializerConfig:179)
[2019-08-12 23:24:07,106] INFO AvroDataConfig values: 
	connect.meta.data = false
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:07,280] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:07,336] INFO 127.0.0.1 - - [13/Aug/2019:06:24:07 +0000] "POST /ksql HTTP/1.1" 200 200  205 (io.confluent.rest-utils.requests:62)
[2019-08-12 23:24:13,477] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:14,144] INFO AvroDataConfig values: 
	connect.meta.data = true
	enhanced.avro.schema.support = false
	schemas.cache.config = 1000
 (io.confluent.connect.avro.AvroDataConfig:347)
[2019-08-12 23:24:14,190] INFO Executing statement: drop materialized QQQ; (io.confluent.ksql.rest.server.computation.CommandRunner:166)
[2019-08-12 23:24:14,191] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:14,192] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:14,192] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:14,192] INFO Build logical plan for drop materialized QQQ;. (io.confluent.ksql.engine.QueryEngine:78)
[2019-08-12 23:24:14,193] INFO KsqlConfig values: 
	ksql.access.validator.enable = auto
	ksql.avro.maps.named = true
	ksql.cassandra.host = localhost
	ksql.cassandra.port = 9042
	ksql.connect.url = http://localhost:8083
	ksql.extension.dir = ext
	ksql.functions.substring.legacy.args = false
	ksql.insert.into.values.enabled = true
	ksql.internal.topic.replicas = 1
	ksql.metrics.extension = null
	ksql.metrics.tags.custom = 
	ksql.named.internal.topics = on
	ksql.output.topic.name.prefix = 
	ksql.persistence.wrap.single.values = true
	ksql.persistent.prefix = query_
	ksql.query.fields.key.legacy = false
	ksql.query.persistent.active.limit = 2147483647
	ksql.schema.registry.url = http://localhost:8081
	ksql.security.extension.class = null
	ksql.service.id = default_
	ksql.sink.partitions = null
	ksql.sink.replicas = null
	ksql.sink.window.change.log.additional.retention = 1000000
	ksql.transient.prefix = transient_
	ksql.udf.collect.metrics = false
	ksql.udf.enable.security.manager = true
	ksql.udfs.enabled = true
	ksql.windowed.session.key.legacy = false
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
 (io.confluent.ksql.util.KsqlConfig:347)
[2019-08-12 23:24:14,193] INFO Executed statement: drop materialized QQQ; (io.confluent.ksql.rest.server.computation.CommandRunner:173)
[2019-08-12 23:24:14,217] INFO 127.0.0.1 - - [13/Aug/2019:06:24:13 +0000] "POST /ksql HTTP/1.1" 200 252  751 (io.confluent.rest-utils.requests:62)
[2019-08-12 23:24:20,773] INFO Stopped NetworkTrafficServerConnector@6a3fbcb1{HTTP/1.1,[http/1.1]}{0.0.0.0:8088} (org.eclipse.jetty.server.AbstractConnector:341)
[2019-08-12 23:24:20,774] INFO node0 Stopped scavenging (org.eclipse.jetty.server.session:167)
[2019-08-12 23:24:20,777] INFO Stopped o.e.j.s.ServletContextHandler@423ed3b5{/ws,null,UNAVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:1045)
[2019-08-12 23:24:20,791] INFO Stopped o.e.j.s.ServletContextHandler@5d124d29{/,null,UNAVAILABLE} (org.eclipse.jetty.server.handler.ContextHandler:1045)
[2019-08-12 23:24:20,794] INFO Server shutting down (io.confluent.ksql.rest.server.KsqlServerMain:78)
